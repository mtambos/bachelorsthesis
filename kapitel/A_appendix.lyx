#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\start_of_appendix
Source Code
\begin_inset CommandInset label
LatexCommand label
name "chap:Source-Code"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

language=Python, numbers=left, caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

utils.py
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

,basicstyle=
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnotesize
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

'''
\end_layout

\begin_layout Plain Layout

utils module.
\end_layout

\begin_layout Plain Layout

'''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from __future__ import division, print_function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import inspect
\end_layout

\begin_layout Plain Layout

from datetime import timedelta
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def read_annotations(file_path, columns, sampling_rate):    
\end_layout

\begin_layout Plain Layout

    print('Reading annotations...')
\end_layout

\begin_layout Plain Layout

    anndf = pd.read_csv('experiments/ecg1_chfdbchf13/annotations.csv',
\end_layout

\begin_layout Plain Layout

                        parse_dates=True, index_col='timestamp')
\end_layout

\begin_layout Plain Layout

    tmp = []
\end_layout

\begin_layout Plain Layout

    for r in anndf.iterrows():
\end_layout

\begin_layout Plain Layout

        new_index = r[0]
\end_layout

\begin_layout Plain Layout

        new_index += timedelta(microseconds=sampling_rate -
\end_layout

\begin_layout Plain Layout

                                            r[0].microsecond%sampling_rate)
\end_layout

\begin_layout Plain Layout

        tmp.append([new_index] + list(r[1]))
\end_layout

\begin_layout Plain Layout

    anndf = pd.DataFrame(tmp, columns=['timestamp', 'SampleNro', 'Type',
\end_layout

\begin_layout Plain Layout

                                       'Sub', 'Chan', 'Num', 'Aux'])
\end_layout

\begin_layout Plain Layout

    anndf = anndf.set_index('timestamp')
\end_layout

\begin_layout Plain Layout

    anndf[columns] = anndf[columns].astype(np.str)
\end_layout

\begin_layout Plain Layout

    return anndf
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def _plot_annotations(annotations, df, column, ytext, ax):
\end_layout

\begin_layout Plain Layout

    for r in annotations.iteritems():
\end_layout

\begin_layout Plain Layout

        x = ax.convert_xunits(r[0])
\end_layout

\begin_layout Plain Layout

        y = ax.convert_yunits(df[column][r[0]])
\end_layout

\begin_layout Plain Layout

        ax.annotate(r[1], xy=(x, y), xytext=(x, ytext))
\end_layout

\begin_layout Plain Layout

        ax.axvline(x, color='r', linewidth=0.75)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def plot_results(df, data_columns, score_column, likelihood_column,
\end_layout

\begin_layout Plain Layout

                 match, slce=None, show_plot=True, save_plot=False,
\end_layout

\begin_layout Plain Layout

                 cut_percentile=75, axhlines=[0.5, 0.97725, 0.999968]):
\end_layout

\begin_layout Plain Layout

    import matplotlib as mpl
\end_layout

\begin_layout Plain Layout

    mpl.use('Agg')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    import pylab
\end_layout

\begin_layout Plain Layout

    import seaborn as sns
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if slce is not None:
\end_layout

\begin_layout Plain Layout

        df = df[slce]
\end_layout

\begin_layout Plain Layout

    m_data = np.max(df[data_columns])[0]
\end_layout

\begin_layout Plain Layout

    m_score = np.max(df[score_column])
\end_layout

\begin_layout Plain Layout

    indexer = df.Annotation.str.match(match, na=False, as_indexer=True)
\end_layout

\begin_layout Plain Layout

    annotations = df.Annotation[indexer]
\end_layout

\begin_layout Plain Layout

    with sns.color_palette('Set2') as p:
\end_layout

\begin_layout Plain Layout

        f = pylab.figure()
\end_layout

\begin_layout Plain Layout

        pylab.subplot(3,1,1)
\end_layout

\begin_layout Plain Layout

        ax1 = f.gca()
\end_layout

\begin_layout Plain Layout

        df[data_columns].plot(ax=ax1, alpha=0.7)
\end_layout

\begin_layout Plain Layout

        ax1.set_ylabel(str(data_columns))
\end_layout

\begin_layout Plain Layout

        _plot_annotations(annotations, df, data_columns[0], m_data, ax1)
\end_layout

\begin_layout Plain Layout

        pylab.legend()
\end_layout

\begin_layout Plain Layout

        pylab.subplot(3,1,2)
\end_layout

\begin_layout Plain Layout

        ax2 = f.gca()
\end_layout

\begin_layout Plain Layout

        df[likelihood_column].plot(ax=ax2, color=p[1], alpha=0.7,
\end_layout

\begin_layout Plain Layout

                                   ylim=(0, 1.2))
\end_layout

\begin_layout Plain Layout

        ax2.set_ylabel(likelihood_column)
\end_layout

\begin_layout Plain Layout

        for hline in axhlines:
\end_layout

\begin_layout Plain Layout

            ax2.axhline(hline, color='b', linewidth=0.75)
\end_layout

\begin_layout Plain Layout

        _plot_annotations(annotations, df, data_columns[0], 1.1, ax2)
\end_layout

\begin_layout Plain Layout

        pylab.legend()
\end_layout

\begin_layout Plain Layout

        pylab.subplot(3,1,3)
\end_layout

\begin_layout Plain Layout

        ax3 = f.gca()
\end_layout

\begin_layout Plain Layout

        scores = df[score_column]
\end_layout

\begin_layout Plain Layout

        upper_percentile = np.percentile(scores, cut_percentile)
\end_layout

\begin_layout Plain Layout

        scores[scores > upper_percentile] = upper_percentile
\end_layout

\begin_layout Plain Layout

        scores.plot(ax=ax3, color=p[2], alpha=0.7)
\end_layout

\begin_layout Plain Layout

        ax3.set_ylabel(score_column)
\end_layout

\begin_layout Plain Layout

        _plot_annotations(annotations, df, data_columns[0], m_score, ax3)
\end_layout

\begin_layout Plain Layout

        pylab.legend()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def f1_score(df, col, thrs, match):
\end_layout

\begin_layout Plain Layout

    detected = len(df[df[col] >thrs])
\end_layout

\begin_layout Plain Layout

    annotation_indexer = df.Annotation.str.match(match, na=False,
\end_layout

\begin_layout Plain Layout

                                                 as_indexer=True)
\end_layout

\begin_layout Plain Layout

    col_thrs = df[col] > thrs
\end_layout

\begin_layout Plain Layout

    real = len(df[annotation_indexer])
\end_layout

\begin_layout Plain Layout

    true_positives = len(df[col_thrs & annotation_indexer])
\end_layout

\begin_layout Plain Layout

    false_positives = len(df[col_thrs & ~annotation_indexer])
\end_layout

\begin_layout Plain Layout

    false_negatives = len(df[~col_thrs & annotation_indexer])
\end_layout

\begin_layout Plain Layout

    precision = true_positives/(true_positives + false_positives)
\end_layout

\begin_layout Plain Layout

    recall = true_positives/(true_positives + false_negatives)
\end_layout

\begin_layout Plain Layout

    score = 2*(precision*recall)/(precision+recall)
\end_layout

\begin_layout Plain Layout

    return {'column': col, 'threshold': thrs, 'detected': detected,
\end_layout

\begin_layout Plain Layout

            'real': real, 'true_positives': true_positives,
\end_layout

\begin_layout Plain Layout

            'false_positives': false_positives,
\end_layout

\begin_layout Plain Layout

            'false_negatives': false_negatives,
\end_layout

\begin_layout Plain Layout

            'precision': precision, 'recall': recall, 'F1': score}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

language=Python, numbers=left, caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

run_ecg1_chfdbchf13.py
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

,basicstyle=
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
footnotesize
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/usr/b#!/usr/bin/env python
\end_layout

\begin_layout Plain Layout

'''
\end_layout

\begin_layout Plain Layout

Experiment on multidimensional ECG using
\end_layout

\begin_layout Plain Layout

the chfdb/chf13 dataset from PhysioNet.
\end_layout

\begin_layout Plain Layout

'''
\end_layout

\begin_layout Plain Layout

from __future__ import division, print_function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import matplotlib as mpl
\end_layout

\begin_layout Plain Layout

mpl.use('Agg')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import pylab
\end_layout

\begin_layout Plain Layout

import seaborn as sns
\end_layout

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import inspect
\end_layout

\begin_layout Plain Layout

from datetime import timedelta
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import utils
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main(cwd, do_amgng, amgng_file, ma_window, ma_recalc_delay,
\end_layout

\begin_layout Plain Layout

         do_cla, cla_file, buffer_len, plot):
\end_layout

\begin_layout Plain Layout

    values = inspect.getargvalues(inspect.currentframe())[3]
\end_layout

\begin_layout Plain Layout

    print('using parameters: {}'.format(values))
\end_layout

\begin_layout Plain Layout

    anndf = utils.read_annotations(os.path.join(cwd, 'annotations.csv'),
\end_layout

\begin_layout Plain Layout

                                   ['Type'], 20000)
\end_layout

\begin_layout Plain Layout

    amgng_df = None
\end_layout

\begin_layout Plain Layout

    if do_amgng:
\end_layout

\begin_layout Plain Layout

        from mgng.amgng import main as amgng_main
\end_layout

\begin_layout Plain Layout

        print('Training AMGNG model...')
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_amgng_{}'.format(amgng_file))
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, amgng_file)
\end_layout

\begin_layout Plain Layout

        amgng_main(input_file=full_path, output_file=out_file,
\end_layout

\begin_layout Plain Layout

                   buffer_len=buffer_len, index_col='timestamp',
\end_layout

\begin_layout Plain Layout

                   skip_rows=[1,2], ma_window=ma_window,
\end_layout

\begin_layout Plain Layout

                   ma_recalc_delay=ma_recalc_delay)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        print('Reading results...')
\end_layout

\begin_layout Plain Layout

        amgng_df = pd.read_csv(out_file, parse_dates=True,
\end_layout

\begin_layout Plain Layout

                               index_col='timestamp')
\end_layout

\begin_layout Plain Layout

        amgng_df['Annotation'] = anndf.Type
\end_layout

\begin_layout Plain Layout

        print('Writing annotated results...')
\end_layout

\begin_layout Plain Layout

        amgng_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        if plot:
\end_layout

\begin_layout Plain Layout

            utils.plot_results(amgng_df, ['ECG1'], 'anomaly_score',
\end_layout

\begin_layout Plain Layout

                               'anomaly_density', '[rs]')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    cla_df = None
\end_layout

\begin_layout Plain Layout

    if do_cla:
\end_layout

\begin_layout Plain Layout

        from cla.swarm import swarm
\end_layout

\begin_layout Plain Layout

        from cla.cla import main as cla_main
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_cla_{}'.format(cla_file))
\end_layout

\begin_layout Plain Layout

        print('Training CLA model...')
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, cla_file)
\end_layout

\begin_layout Plain Layout

        SWARM_DESCRIPTION = {
\end_layout

\begin_layout Plain Layout

            'includedFields': [
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                    'fieldName': 'timestamp',
\end_layout

\begin_layout Plain Layout

                    'fieldType': 'datetime',
\end_layout

\begin_layout Plain Layout

                },
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                    'fieldName': 'ECG1',
\end_layout

\begin_layout Plain Layout

                    'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

                },
\end_layout

\begin_layout Plain Layout

            ],
\end_layout

\begin_layout Plain Layout

            'streamDef': {
\end_layout

\begin_layout Plain Layout

                'info': 'chfdbchf13 ECG1',
\end_layout

\begin_layout Plain Layout

                'version': 1,
\end_layout

\begin_layout Plain Layout

                'streams': [
\end_layout

\begin_layout Plain Layout

                    {
\end_layout

\begin_layout Plain Layout

                        'info': 'chfdbchf13',
\end_layout

\begin_layout Plain Layout

                        'source': full_path,
\end_layout

\begin_layout Plain Layout

                        'columns': ['*']
\end_layout

\begin_layout Plain Layout

                    }
\end_layout

\begin_layout Plain Layout

                ]
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            'inferenceType': 'TemporalAnomaly',
\end_layout

\begin_layout Plain Layout

            'inferenceArgs': {
\end_layout

\begin_layout Plain Layout

                'predictionSteps': [1],
\end_layout

\begin_layout Plain Layout

                'predictedField': 'ECG1'
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            'iterationCount': buffer_len,
\end_layout

\begin_layout Plain Layout

            'swarmSize': 'large'
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        swarm(cwd=cwd, input_file=cla_file,
\end_layout

\begin_layout Plain Layout

              swarm_description=SWARM_DESCRIPTION)
\end_layout

\begin_layout Plain Layout

        cla_main(cwd=cwd, input_file=full_path, output_name=out_file, plot=False
,
\end_layout

\begin_layout Plain Layout

                 predicted_field='ECG1')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        print('Reading results...')
\end_layout

\begin_layout Plain Layout

        cla_df = pd.read_csv(out_file, parse_dates=True, index_col='timestamp')
\end_layout

\begin_layout Plain Layout

        cla_df['Annotation'] = anndf.Type
\end_layout

\begin_layout Plain Layout

        print('Writing annotated results...')
\end_layout

\begin_layout Plain Layout

        cla_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        if plot:
\end_layout

\begin_layout Plain Layout

            utils.plot_results(cla_df, ['ECG1'], 'anomaly_score',
\end_layout

\begin_layout Plain Layout

                               'anomaly_likelihood', '[rs]')
\end_layout

\begin_layout Plain Layout

    return amgng_df, cla_df
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    import sys
\end_layout

\begin_layout Plain Layout

    args = sys.argv
\end_layout

\begin_layout Plain Layout

    if '--do_amgng' in args:
\end_layout

\begin_layout Plain Layout

        do_amgng = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_amgng = False
\end_layout

\begin_layout Plain Layout

    if '--amgng_file' in args:
\end_layout

\begin_layout Plain Layout

        amgng_file = args[args.index('--amgng_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        amgng_file = 'experiments/ecg1_chfdbchf13/chfdbchf13_final.csv'
\end_layout

\begin_layout Plain Layout

    if '--do_cla' in args:
\end_layout

\begin_layout Plain Layout

        do_cla = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_cla = False
\end_layout

\begin_layout Plain Layout

    if '--cla_file' in args:
\end_layout

\begin_layout Plain Layout

        cla_file = args[args.index('--cla_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        cla_file = 'experiments/ecg1_chfdbchf13/chfdbchf13_final.csv'
\end_layout

\begin_layout Plain Layout

    if '--cwd' in args:
\end_layout

\begin_layout Plain Layout

        cwd = args[args.index('--cwd') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        if do_amgng:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(amgng_file)
\end_layout

\begin_layout Plain Layout

            amgng_file = os.path.basename(amgng_file)
\end_layout

\begin_layout Plain Layout

        elif do_cla:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(cla_file)
\end_layout

\begin_layout Plain Layout

            cla_file = os.path.basename(cla_file)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            cwd = os.getcwd()
\end_layout

\begin_layout Plain Layout

    if '--buffer_len' in args:
\end_layout

\begin_layout Plain Layout

        buffer_len = int(args[args.index('--buffer_len') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        buffer_len = 300
\end_layout

\begin_layout Plain Layout

    if '--ma_window' in args:
\end_layout

\begin_layout Plain Layout

        ma_window = int(args[args.index('--ma_window') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_window = 300
\end_layout

\begin_layout Plain Layout

    if '--ma_recalc_delay' in args:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = int(args[args.index('--ma_recalc_delay') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = 1
\end_layout

\begin_layout Plain Layout

    if '--plot' in args:
\end_layout

\begin_layout Plain Layout

        plot = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        plot = False
\end_layout

\begin_layout Plain Layout

    main(cwd=cwd, do_amgng=do_amgng, amgng_file=amgng_file,
\end_layout

\begin_layout Plain Layout

         ma_window=ma_window, do_cla=do_cla, cla_file=cla_file,
\end_layout

\begin_layout Plain Layout

         buffer_len=buffer_len, plot=plot, ma_recalc_delay=ma_recalc_delay)
\end_layout

\end_inset


\end_layout

\end_body
\end_document
