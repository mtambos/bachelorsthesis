#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\start_of_appendix
Source Code
\begin_inset CommandInset label
LatexCommand label
name "chap:Source-Code"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{
\end_layout

\end_inset

caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

mgng.py
\begin_inset ERT
status open

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "src:mgng_py"

\end_inset

 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

from __future__ import print_function, division
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from collections import defaultdict
\end_layout

\begin_layout Plain Layout

from functools import partial
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from numpy.random import random_sample
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import networkx as nx
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import numpy.linalg as lnp
\end_layout

\begin_layout Plain Layout

import numexpr as ne
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class MGNG:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def __init__(self, dimensions=1, alpha=0.5, beta=0.75, gamma=88,
\end_layout

\begin_layout Plain Layout

                 delta=0.5, theta=100, eta=0.9995, lmbda=600,
\end_layout

\begin_layout Plain Layout

                 e_w=0.05, e_n=0.0006):
\end_layout

\begin_layout Plain Layout

        self.dimensions = dimensions
\end_layout

\begin_layout Plain Layout

        self.alpha = alpha
\end_layout

\begin_layout Plain Layout

        self.beta = beta
\end_layout

\begin_layout Plain Layout

        self.gamma = gamma
\end_layout

\begin_layout Plain Layout

        self.delta = delta
\end_layout

\begin_layout Plain Layout

        self.theta = theta
\end_layout

\begin_layout Plain Layout

        self.eta = eta
\end_layout

\begin_layout Plain Layout

        self.lmbda = lmbda
\end_layout

\begin_layout Plain Layout

        self.e_w = e_w
\end_layout

\begin_layout Plain Layout

        self.e_n = e_n
\end_layout

\begin_layout Plain Layout

        # 4.
 initialize global temporal context C1 := 0
\end_layout

\begin_layout Plain Layout

        self.c_t = np.zeros(dimensions)
\end_layout

\begin_layout Plain Layout

        self.next_n = 0
\end_layout

\begin_layout Plain Layout

        # 1.
 time variable t := 0
\end_layout

\begin_layout Plain Layout

        self.t = 0
\end_layout

\begin_layout Plain Layout

        # 3.
 initialize connections set E 
\backslash
in K * K := 
\backslash
empty;
\end_layout

\begin_layout Plain Layout

        self.model = nx.Graph()
\end_layout

\begin_layout Plain Layout

        self.empty_row = np.array([np.nan]*dimensions)
\end_layout

\begin_layout Plain Layout

        self.weights = np.array([[np.nan]*dimensions]*theta)
\end_layout

\begin_layout Plain Layout

        self.contexts = np.array([[np.nan]*dimensions]*theta)
\end_layout

\begin_layout Plain Layout

        self.errors = np.array([np.nan]*theta)
\end_layout

\begin_layout Plain Layout

        self.matrix_indices = np.zeros(theta)
\end_layout

\begin_layout Plain Layout

        # 2.
 initialize neuron set K with 2 neurons with counter e := 0
\end_layout

\begin_layout Plain Layout

        # and random weight and context vectors
\end_layout

\begin_layout Plain Layout

        self._add_node()
\end_layout

\begin_layout Plain Layout

        self._add_node()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def distances(self, xt):
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        d_n(t) = (1 - 
\backslash
alpha) * ||x_t - w_n||^2 + 
\backslash
alpha||C_t - c_n||^2
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        w = self.weights
\end_layout

\begin_layout Plain Layout

        c = self.contexts
\end_layout

\begin_layout Plain Layout

        c_t = self.c_t
\end_layout

\begin_layout Plain Layout

        alpha = self.alpha
\end_layout

\begin_layout Plain Layout

        # tot = ne.evaluate('sum((1 - alpha)*(xt - w)**2 +'
\end_layout

\begin_layout Plain Layout

        #                   '    alpha*(c_t-c)**2, axis=1)')
\end_layout

\begin_layout Plain Layout

        tot = np.add.reduce((1-self.alpha)*(xt-self.weights)**2 +
\end_layout

\begin_layout Plain Layout

                            self.alpha*(self.c_t-self.contexts)**2, axis=1)
\end_layout

\begin_layout Plain Layout

        return tot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def find_winner_neurons(self, xt):
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        find winner r := arg min_{n 
\backslash
in K} d_n(t)
\end_layout

\begin_layout Plain Layout

        and second winner s := arg min_{n 
\backslash
in K
\backslash
{r}} d_n(t)
\end_layout

\begin_layout Plain Layout

        where d_n(t) = (1 - 
\backslash
alpha) * ||x_t - w_n||^2 + 
\backslash
alpha||C_t - c_n||^2
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        distances = self.distances(xt)
\end_layout

\begin_layout Plain Layout

        r, q = distances.argpartition(1)[:2]
\end_layout

\begin_layout Plain Layout

        return (distances[r], r), (distances[q], q)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def _update_neighbors(self, r, xt):
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        update neuron r and its direct topological neighbors N_r:
\end_layout

\begin_layout Plain Layout

            w_r := w_r + 
\backslash
epsilon_w * (x_t - w_r)
\end_layout

\begin_layout Plain Layout

            c_r := c_r + 
\backslash
epsilon_w*(C_t - c_r)
\end_layout

\begin_layout Plain Layout

            (
\backslash
forall n 
\backslash
in N_r)
\end_layout

\begin_layout Plain Layout

                w_n := w_n + 
\backslash
epsilon_n * (x_t - w_i)
\end_layout

\begin_layout Plain Layout

                c_n := c_n + 
\backslash
epsilon_n*(C_t - c_i)
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        w = self.weights[r]
\end_layout

\begin_layout Plain Layout

        c = self.contexts[r]
\end_layout

\begin_layout Plain Layout

        w += self.e_w * (xt - w)
\end_layout

\begin_layout Plain Layout

        c += self.e_w * (self.c_t - c)
\end_layout

\begin_layout Plain Layout

        for n in self.model.neighbors(r):
\end_layout

\begin_layout Plain Layout

            w = self.weights[n]
\end_layout

\begin_layout Plain Layout

            c = self.contexts[n]
\end_layout

\begin_layout Plain Layout

            w += self.e_n * (xt - w)
\end_layout

\begin_layout Plain Layout

            c += self.e_n * (self.c_t - c)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def _increment_edges_age(self, r):
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        increment the age of all edges connected with r
\end_layout

\begin_layout Plain Layout

            age_{(r,n)} := age_{(r,n)} + 1 (
\backslash
forall n 
\backslash
in N_r )
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        for (u, v) in self.model.edges(r):
\end_layout

\begin_layout Plain Layout

            self.model[u][v]['age'] += 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def _add_node(self, e=0, w=None, c=None):
\end_layout

\begin_layout Plain Layout

        if w is None:
\end_layout

\begin_layout Plain Layout

            w = random_sample(self.dimensions)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            w = np.reshape(w, newshape=self.dimensions)
\end_layout

\begin_layout Plain Layout

        if c is None:
\end_layout

\begin_layout Plain Layout

            c = random_sample(self.dimensions)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            c = np.reshape(c, newshape=self.dimensions)
\end_layout

\begin_layout Plain Layout

        id = self.matrix_indices.argmin()
\end_layout

\begin_layout Plain Layout

        self.matrix_indices[id] = True
\end_layout

\begin_layout Plain Layout

        self.errors[id] = e
\end_layout

\begin_layout Plain Layout

        self.weights[id] = w
\end_layout

\begin_layout Plain Layout

        self.contexts[id] = c
\end_layout

\begin_layout Plain Layout

        self.model.add_node(id)
\end_layout

\begin_layout Plain Layout

        print('Node {} added.'.format(id))
\end_layout

\begin_layout Plain Layout

        return id
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def _remove_node(self, id):
\end_layout

\begin_layout Plain Layout

        self.matrix_indices[id] = False
\end_layout

\begin_layout Plain Layout

        self.errors[id] = np.nan
\end_layout

\begin_layout Plain Layout

        self.weights[id] = self.empty_row
\end_layout

\begin_layout Plain Layout

        self.contexts[id] = self.empty_row
\end_layout

\begin_layout Plain Layout

        self.model.remove_node(id)
\end_layout

\begin_layout Plain Layout

        print('Node {} removed.'.format(id))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def _add_edge(self, r, s):
\end_layout

\begin_layout Plain Layout

        if r == s:
\end_layout

\begin_layout Plain Layout

            raise Exception('cannot connect edge to itself')
\end_layout

\begin_layout Plain Layout

        if s in self.model.neighbors(r):
\end_layout

\begin_layout Plain Layout

            self.model[r][s]['age'] = 0
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            self.model.add_edge(r, s, age=0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def _remove_old_edges(self):
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        remove old connections E := E 
\backslash
 {(a, b)| age_(a, b) > 
\backslash
gamma}
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        for (u, v) in self.model.edges():
\end_layout

\begin_layout Plain Layout

            if self.model.edge[u][v]['age'] > self.gamma:
\end_layout

\begin_layout Plain Layout

                self.model.remove_edge(u, v)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def _remove_unconnected_neurons(self):
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        for n in self.model.nodes():
\end_layout

\begin_layout Plain Layout

            if not self.model.degree(n):
\end_layout

\begin_layout Plain Layout

                self._remove_node(n)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def _create_new_neuron(self):
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        create new neuron if t mod 
\backslash
lambda = 0 and |K| < 
\backslash
theta
\end_layout

\begin_layout Plain Layout

            a.
 find neuron q with the greatest counter: q := arg max_{n 
\backslash
in K} e_n
\end_layout

\begin_layout Plain Layout

            b.
 find neighbor f of q with f := arg max_{n 
\backslash
in N_q} e_n
\end_layout

\begin_layout Plain Layout

            c.
 initialize new neuron l
\end_layout

\begin_layout Plain Layout

                K := K 
\backslash
cup l
\end_layout

\begin_layout Plain Layout

                w_l := 1/2 * (w_q + w_f)
\end_layout

\begin_layout Plain Layout

                c_l := 1/2 * (c_q + c_f)
\end_layout

\begin_layout Plain Layout

                e_l := 
\backslash
delta * (e_f + e_q)
\end_layout

\begin_layout Plain Layout

            d.
 adapt connections: E := (E 
\backslash
 {(q, f)}) 
\backslash
cup {(q, n), (n, f)}
\end_layout

\begin_layout Plain Layout

            e.
 decrease counter of q and f by the factor 
\backslash
delta
\end_layout

\begin_layout Plain Layout

                e_q := (1 - 
\backslash
deta) * e_q
\end_layout

\begin_layout Plain Layout

                e_f := (1 - 
\backslash
deta) * e_f
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        q = np.nanargmax(self.errors)
\end_layout

\begin_layout Plain Layout

        N_q = None
\end_layout

\begin_layout Plain Layout

        if q:
\end_layout

\begin_layout Plain Layout

            N_q = self.model.neighbors(q)
\end_layout

\begin_layout Plain Layout

        if N_q:
\end_layout

\begin_layout Plain Layout

            f = max(N_q, key=lambda n: self.errors[n])
\end_layout

\begin_layout Plain Layout

            l = self._add_node(e=self.delta*(self.errors[q] + self.errors[f]),
\end_layout

\begin_layout Plain Layout

                               w=(self.weights[q] + self.weights[f]) / 2,
\end_layout

\begin_layout Plain Layout

                               c=(self.contexts[q] + self.contexts[f]) / 2)
\end_layout

\begin_layout Plain Layout

            self.model.remove_edge(q, f)
\end_layout

\begin_layout Plain Layout

            self._add_edge(q, l)
\end_layout

\begin_layout Plain Layout

            self._add_edge(f, l)
\end_layout

\begin_layout Plain Layout

            self.errors[q] *= (1 - self.delta)
\end_layout

\begin_layout Plain Layout

            self.errors[f] *= (1 - self.delta)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            return l
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def time_step(self, xt):
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        '''
\end_layout

\begin_layout Plain Layout

        # 6.
 find winner r and second winner s
\end_layout

\begin_layout Plain Layout

        xt = np.reshape(xt, newshape=self.dimensions)
\end_layout

\begin_layout Plain Layout

        r, s = self.find_winner_neurons(xt)
\end_layout

\begin_layout Plain Layout

        r_dist, r = r
\end_layout

\begin_layout Plain Layout

        s_dist, s = s
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # 7.
 Ct+1 := (1 - 
\backslash
beta)*w_r + 
\backslash
beta*c_r
\end_layout

\begin_layout Plain Layout

        c_t1 = (1 - self.beta) * self.weights[r] + self.beta * self.contexts[r]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # 8.
 connect r with s: E := E 
\backslash
cup {(r, s)}
\end_layout

\begin_layout Plain Layout

        # 9.
 age(r;s) := 0
\end_layout

\begin_layout Plain Layout

        self._add_edge(r, s)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # 10.
 increment counter of r: e_r := e_r + 1
\end_layout

\begin_layout Plain Layout

        self.errors[r] += 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # 11.
 update neuron r and its direct topological neighbors:
\end_layout

\begin_layout Plain Layout

        self._update_neighbors(r, xt)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # 12.
 increment the age of all edges connected with r
\end_layout

\begin_layout Plain Layout

        self._increment_edges_age(r)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # 13.
 remove old connections E := E 
\backslash
 {(a, b)| age_(a, b) > 
\backslash
gamma}
\end_layout

\begin_layout Plain Layout

        self._remove_old_edges()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # 14.
 delete all nodes with no connections.
\end_layout

\begin_layout Plain Layout

        self._remove_unconnected_neurons()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # 15.
 create new neuron if t mod 
\backslash
lambda = 0 and |K| < 
\backslash
theta
\end_layout

\begin_layout Plain Layout

        if self.t % self.lmbda == 0 and len(self.model.nodes()) < self.theta:
\end_layout

\begin_layout Plain Layout

            self._create_new_neuron()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # 16.
 decrease counter of all neurons by the factor 
\backslash
eta:
\end_layout

\begin_layout Plain Layout

        #    e_n := 
\backslash
eta * e_n (
\backslash
forall n 
\backslash
in K)
\end_layout

\begin_layout Plain Layout

        self.errors *= self.eta
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # 7.
 Ct+1 := (1 - 
\backslash
beta)*w_r + 
\backslash
beta*c_r
\end_layout

\begin_layout Plain Layout

        self.c_t = c_t1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # 17.
 t := t + 1
\end_layout

\begin_layout Plain Layout

        self.t += 1
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

        return r_dist
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main():
\end_layout

\begin_layout Plain Layout

    import Oger as og
\end_layout

\begin_layout Plain Layout

    import pylab
\end_layout

\begin_layout Plain Layout

    signal = og.datasets.mackey_glass(sample_len=1500,
\end_layout

\begin_layout Plain Layout

                                      n_samples=1,
\end_layout

\begin_layout Plain Layout

                                      seed=50)[0][0].flatten()
\end_layout

\begin_layout Plain Layout

    print(signal)
\end_layout

\begin_layout Plain Layout

    signal = signal + np.abs(signal.min())
\end_layout

\begin_layout Plain Layout

    print(signal)
\end_layout

\begin_layout Plain Layout

    # 2.
 initialize neuron set K with 2 neurons with counter e := 0 and random weight
 and context vectors
\end_layout

\begin_layout Plain Layout

    # 3.
 initialize connections set E 
\backslash
in K * K := 
\backslash
empty;
\end_layout

\begin_layout Plain Layout

    # 4.
 initialize global temporal context C1 := 0
\end_layout

\begin_layout Plain Layout

    mgng = MGNG(lmbda=6)
\end_layout

\begin_layout Plain Layout

    # 1.
 time variable t := 1
\end_layout

\begin_layout Plain Layout

    # 5.
 read / draw input signal xt
\end_layout

\begin_layout Plain Layout

    # 18.
 if more input signals available goto step 5 else terminate
\end_layout

\begin_layout Plain Layout

    for t, xt in enumerate(signal, 1):
\end_layout

\begin_layout Plain Layout

        mgng.time_step(xt)
\end_layout

\begin_layout Plain Layout

        if t % 1500 == 0:
\end_layout

\begin_layout Plain Layout

            print('training: %i%%' % (t / 1500))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    errors = [[] for _ in range(30)]
\end_layout

\begin_layout Plain Layout

    for t, xt in enumerate(signal, 1):
\end_layout

\begin_layout Plain Layout

        if t % 150 == 0:
\end_layout

\begin_layout Plain Layout

            print('calculating errors: %i%%' % (t / 150))
\end_layout

\begin_layout Plain Layout

        n, _ = mgng.find_winner_neurons(xt)
\end_layout

\begin_layout Plain Layout

        n = n[1] 
\end_layout

\begin_layout Plain Layout

        for i in range(min(30, t)):
\end_layout

\begin_layout Plain Layout

            errors[i].append((n['w'] - signal[t - i - 1]) ** 2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    summary = [0] * 30
\end_layout

\begin_layout Plain Layout

    for i in range(30):
\end_layout

\begin_layout Plain Layout

        summary[i] = np.sum(errors[i]) / len(errors[i])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    pylab.subplot(2, 1, 1)
\end_layout

\begin_layout Plain Layout

    pylab.plot(range(30), summary)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    pylab.subplot(2, 1, 2)
\end_layout

\begin_layout Plain Layout

    pylab.plot(range(len(mgng.model.nodes())),
\end_layout

\begin_layout Plain Layout

               [n[1]['w'] for n in mgng.model.nodes(data=True)])
\end_layout

\begin_layout Plain Layout

    pylab.show()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    import sys
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    if len(sys.argv) > 1:
\end_layout

\begin_layout Plain Layout

        main(sys.argv[1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        main()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{
\end_layout

\end_inset

caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

amgng.py
\begin_inset ERT
status open

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "src:amgng_py"

\end_inset

 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

from __future__ import division, print_function
\end_layout

\begin_layout Plain Layout

from collections import deque
\end_layout

\begin_layout Plain Layout

import inspect
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from ring_buffer import RingBuffer
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import mgng
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import numexpr as ne
\end_layout

\begin_layout Plain Layout

import numpy.linalg as lnp
\end_layout

\begin_layout Plain Layout

from scipy.stats import norm
\end_layout

\begin_layout Plain Layout

import bottleneck as bn
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class AMGNG:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def __init__(self, comparison_function, buffer_len, dimensions,
\end_layout

\begin_layout Plain Layout

                 prest_gamma, prest_lmbda, prest_theta,
\end_layout

\begin_layout Plain Layout

                 pst_gamma, pst_lmbda, pst_theta,
\end_layout

\begin_layout Plain Layout

                 prest_alpha=0.5, prest_beta=0.5, prest_delta=0.5,
\end_layout

\begin_layout Plain Layout

                 prest_eta=0.9995, prest_e_w=0.05, prest_e_n=0.0006,
\end_layout

\begin_layout Plain Layout

                 pst_alpha=0.5, pst_beta=0.75, pst_delta=0.5,
\end_layout

\begin_layout Plain Layout

                 pst_eta=0.9995, pst_e_w=0.05, pst_e_n=0.0006,
\end_layout

\begin_layout Plain Layout

                 ma_window_len=None, ma_recalc_delay=1):
\end_layout

\begin_layout Plain Layout

        values = inspect.getargvalues(inspect.currentframe())[3]
\end_layout

\begin_layout Plain Layout

        print('Init parameters: {}'.format(values))
\end_layout

\begin_layout Plain Layout

        self.comparison_function = comparison_function
\end_layout

\begin_layout Plain Layout

        self.buffer_len = buffer_len
\end_layout

\begin_layout Plain Layout

        self.dimensions = dimensions
\end_layout

\begin_layout Plain Layout

        self.present = mgng.MGNG(dimensions=dimensions,
\end_layout

\begin_layout Plain Layout

                                 gamma=int(prest_gamma),
\end_layout

\begin_layout Plain Layout

                                 lmbda=int(prest_lmbda),
\end_layout

\begin_layout Plain Layout

                                 theta=int(prest_theta),
\end_layout

\begin_layout Plain Layout

                                 alpha=float(prest_alpha),
\end_layout

\begin_layout Plain Layout

                                 beta=float(prest_beta),
\end_layout

\begin_layout Plain Layout

                                 delta=float(prest_delta),
\end_layout

\begin_layout Plain Layout

                                 eta=float(prest_eta),
\end_layout

\begin_layout Plain Layout

                                 e_w=float(prest_e_w),
\end_layout

\begin_layout Plain Layout

                                 e_n=float(prest_e_n))
\end_layout

\begin_layout Plain Layout

        self.past = mgng.MGNG(dimensions=dimensions,
\end_layout

\begin_layout Plain Layout

                              gamma=int(pst_gamma),
\end_layout

\begin_layout Plain Layout

                              lmbda=int(pst_lmbda),
\end_layout

\begin_layout Plain Layout

                              theta=int(pst_theta),
\end_layout

\begin_layout Plain Layout

                              alpha=float(pst_alpha),
\end_layout

\begin_layout Plain Layout

                              beta=float(pst_beta),
\end_layout

\begin_layout Plain Layout

                              delta=float(pst_delta),
\end_layout

\begin_layout Plain Layout

                              eta=float(pst_eta),
\end_layout

\begin_layout Plain Layout

                              e_w=float(pst_e_w),
\end_layout

\begin_layout Plain Layout

                              e_n=float(pst_e_n))
\end_layout

\begin_layout Plain Layout

        # self.buffer = deque(maxlen=self.buffer_len)
\end_layout

\begin_layout Plain Layout

        self.buffer = RingBuffer([[np.nan]*dimensions]*buffer_len)
\end_layout

\begin_layout Plain Layout

        if ma_window_len is None:
\end_layout

\begin_layout Plain Layout

            # self.ma_window = deque(maxlen=self.buffer_len)
\end_layout

\begin_layout Plain Layout

            self.ma_window = RingBuffer([np.nan]*buffer_len)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            # self.ma_window = deque(maxlen=ma_window_len)
\end_layout

\begin_layout Plain Layout

            self.ma_window = RingBuffer([np.nan]*ma_window_len)
\end_layout

\begin_layout Plain Layout

        self.ma_recalc_delay = ma_recalc_delay
\end_layout

\begin_layout Plain Layout

        self.anomaly_mean = None
\end_layout

\begin_layout Plain Layout

        self.anomaly_std = None
\end_layout

\begin_layout Plain Layout

        self.t = 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def time_step(self, xt):
\end_layout

\begin_layout Plain Layout

        xt = np.reshape(xt, newshape=self.dimensions)
\end_layout

\begin_layout Plain Layout

        ret_val = 0.
\end_layout

\begin_layout Plain Layout

        self.buffer.append(xt)
\end_layout

\begin_layout Plain Layout

        self.present.time_step(xt)
\end_layout

\begin_layout Plain Layout

        if self.t >= self.buffer_len:
\end_layout

\begin_layout Plain Layout

            pst_xt = self.buffer[0]
\end_layout

\begin_layout Plain Layout

            self.past.time_step(pst_xt)
\end_layout

\begin_layout Plain Layout

            if self.t >= self.present.theta + self.past.theta:
\end_layout

\begin_layout Plain Layout

                ret_val = self.comparison_function(self.present, self.past,
\end_layout

\begin_layout Plain Layout

                                                   self.present.alpha)
\end_layout

\begin_layout Plain Layout

        self.ma_window.append(ret_val)
\end_layout

\begin_layout Plain Layout

        if self.t % self.ma_recalc_delay == 0:
\end_layout

\begin_layout Plain Layout

            self.anomaly_mean = bn.nanmean(self.ma_window)
\end_layout

\begin_layout Plain Layout

            self.anomaly_std = bn.nanstd(self.ma_window, ddof=1)
\end_layout

\begin_layout Plain Layout

        if self.anomaly_mean is None:
\end_layout

\begin_layout Plain Layout

            anomaly_density = 0.5
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            anomaly_density = norm.cdf(ret_val, loc=self.anomaly_mean,
\end_layout

\begin_layout Plain Layout

                                       scale=self.anomaly_std)
\end_layout

\begin_layout Plain Layout

        self.t += 1
\end_layout

\begin_layout Plain Layout

        return ret_val, anomaly_density
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def compare_models(present_model, past_model, alpha):
\end_layout

\begin_layout Plain Layout

    tot = [0.]
\end_layout

\begin_layout Plain Layout

    ps_w = past_model.weights
\end_layout

\begin_layout Plain Layout

    ps_c = past_model.contexts
\end_layout

\begin_layout Plain Layout

    for pr_x in present_model.model.node:
\end_layout

\begin_layout Plain Layout

        pr_x_w = present_model.weights[pr_x]
\end_layout

\begin_layout Plain Layout

        pr_x_c = present_model.contexts[pr_x]
\end_layout

\begin_layout Plain Layout

        # dists = ne.evaluate('sum((1-alpha)*(pr_x_w - ps_w)**2 +'
\end_layout

\begin_layout Plain Layout

        #                     '    alpha*(pr_x_c - ps_c)**2, axis=1)')
\end_layout

\begin_layout Plain Layout

        dists = np.add.reduce((1 - alpha)*(pr_x_w - ps_w)**2 +
\end_layout

\begin_layout Plain Layout

                              alpha*(pr_x_c - ps_c)**2, axis=1)
\end_layout

\begin_layout Plain Layout

        # print(dists)
\end_layout

\begin_layout Plain Layout

        ps_x = np.nanargmin(dists)
\end_layout

\begin_layout Plain Layout

        tot += dists[ps_x]
\end_layout

\begin_layout Plain Layout

    return tot[0] / len(present_model.model.nodes())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def compare_models_w(present_model, past_model):
\end_layout

\begin_layout Plain Layout

    tot_w = [0.]
\end_layout

\begin_layout Plain Layout

    ps_w = past_model.weights
\end_layout

\begin_layout Plain Layout

    for pr_x in self.present.model.nodes():
\end_layout

\begin_layout Plain Layout

        pr_x_w = self.present.get_node(pr_x)['w']
\end_layout

\begin_layout Plain Layout

        dists = ne.evaluate('sum((pr_x_w - ps_w)**2, axis=1)')
\end_layout

\begin_layout Plain Layout

        ps_x = np.nanargmin(dists)
\end_layout

\begin_layout Plain Layout

        tot_w += dists[ps_x]
\end_layout

\begin_layout Plain Layout

    return tot_w[0] / len(self.present.model.nodes())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def compare_models_c(present_model, past_model):
\end_layout

\begin_layout Plain Layout

    tot_c = [0.]
\end_layout

\begin_layout Plain Layout

    ps_c = past_model.contexts
\end_layout

\begin_layout Plain Layout

    for pr_x in self.present.model.nodes():
\end_layout

\begin_layout Plain Layout

        pr_x_c = self.present.get_node(pr_x)['c']
\end_layout

\begin_layout Plain Layout

        dists = ne.evaluate('sum((pr_x_c - ps_c)**2, axis=1)')
\end_layout

\begin_layout Plain Layout

        tot_c += dists[ps_x]
\end_layout

\begin_layout Plain Layout

    return tot_c[0] / len(self.present.model.nodes())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main(input_file, output_file, input_frame=None,
\end_layout

\begin_layout Plain Layout

         buffer_len=None, sampling_rate=None, index_col=None,
\end_layout

\begin_layout Plain Layout

         skip_rows=None, ma_window=None, ma_recalc_delay=1):
\end_layout

\begin_layout Plain Layout

    import pandas as pd
\end_layout

\begin_layout Plain Layout

    from datetime import datetime
\end_layout

\begin_layout Plain Layout

    if buffer_len is None:
\end_layout

\begin_layout Plain Layout

        buffer_len = 2000
\end_layout

\begin_layout Plain Layout

    if input_frame is None:
\end_layout

\begin_layout Plain Layout

        signal = pd.read_csv(input_file, index_col=index_col, parse_dates=True,
\end_layout

\begin_layout Plain Layout

                             skiprows=skip_rows)
\end_layout

\begin_layout Plain Layout

        if sampling_rate is not None:
\end_layout

\begin_layout Plain Layout

            signal = signal.resample(sampling_rate)
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        signal = input_frame
\end_layout

\begin_layout Plain Layout

    if ma_window is None:
\end_layout

\begin_layout Plain Layout

        ma_window = len(signal)
\end_layout

\begin_layout Plain Layout

    print(signal.head())
\end_layout

\begin_layout Plain Layout

    print(signal.tail())
\end_layout

\begin_layout Plain Layout

    print('Seting up model.')
\end_layout

\begin_layout Plain Layout

    amgng = AMGNG(comparison_function=compare_models,
\end_layout

\begin_layout Plain Layout

                  buffer_len=buffer_len, dimensions=signal.shape[1],
\end_layout

\begin_layout Plain Layout

                  prest_gamma=buffer_len//2, prest_lmbda=buffer_len*6,
\end_layout

\begin_layout Plain Layout

                  prest_theta=buffer_len, pst_gamma=buffer_len//2,
\end_layout

\begin_layout Plain Layout

                  pst_lmbda=buffer_len*6, pst_theta=buffer_len,
\end_layout

\begin_layout Plain Layout

                  ma_window_len=ma_window, ma_recalc_delay=ma_recalc_delay)
\end_layout

\begin_layout Plain Layout

    scores = np.zeros(len(signal))
\end_layout

\begin_layout Plain Layout

    pscores = np.zeros(len(signal))
\end_layout

\begin_layout Plain Layout

    print('Processing {} rows'.format(len(signal)))
\end_layout

\begin_layout Plain Layout

    start = datetime.now()
\end_layout

\begin_layout Plain Layout

    for t, xt in enumerate(signal.values):
\end_layout

\begin_layout Plain Layout

        if t % (len(signal)//100) == 0:
\end_layout

\begin_layout Plain Layout

            print('{}% done.
 Sample datapoint: {}'
\end_layout

\begin_layout Plain Layout

                  .format(t / (len(signal)//100), xt))
\end_layout

\begin_layout Plain Layout

        scores[t], pscores[t] = amgng.time_step(xt)
\end_layout

\begin_layout Plain Layout

    time_taken = (datetime.now() - start).total_seconds()
\end_layout

\begin_layout Plain Layout

    print('It took {} seconds to process the signal'.format(time_taken))
\end_layout

\begin_layout Plain Layout

    signal['anomaly_score'] = pd.Series(scores, index=signal.index)
\end_layout

\begin_layout Plain Layout

    signal['anomaly_density'] = pd.Series(pscores, index=signal.index)
\end_layout

\begin_layout Plain Layout

    print('Writing results to {}'.format(output_file))
\end_layout

\begin_layout Plain Layout

    signal.to_csv(output_file)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    import sys
\end_layout

\begin_layout Plain Layout

    args = sys.argv
\end_layout

\begin_layout Plain Layout

    if '--input_file' in args:
\end_layout

\begin_layout Plain Layout

        input_file = args[args.index('--input_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        input_file = 'samples.csv'
\end_layout

\begin_layout Plain Layout

    if '--output_file' in args:
\end_layout

\begin_layout Plain Layout

        output_file = args[args.index('--output_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        output_file = '{}_out.csv'.format(input_file)
\end_layout

\begin_layout Plain Layout

    if '--buffer_len' in args:
\end_layout

\begin_layout Plain Layout

        buffer_len = int(args[args.index('--buffer_len') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        buffer_len = None
\end_layout

\begin_layout Plain Layout

    if '--sampling_rate' in args:
\end_layout

\begin_layout Plain Layout

        sampling_rate = args[args.index('--sampling_rate') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        sampling_rate = None
\end_layout

\begin_layout Plain Layout

    if '--index_col' in args:
\end_layout

\begin_layout Plain Layout

        index_col = args[args.index('--index_col') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        index_col = None
\end_layout

\begin_layout Plain Layout

    if '--skip_rows' in args:
\end_layout

\begin_layout Plain Layout

        skip_rows = args[args.index('--skip_rows') + 1].split(',')
\end_layout

\begin_layout Plain Layout

        skip_rows = [int(r) for r in skip_rows]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        skip_rows = None
\end_layout

\begin_layout Plain Layout

    print(args)
\end_layout

\begin_layout Plain Layout

    main(input_file, output_file, buffer_len, sampling_rate,
\end_layout

\begin_layout Plain Layout

         index_col, skip_rows)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{
\end_layout

\end_inset

caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

swarm.py
\begin_inset ERT
status open

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "src:swarm_py"

\end_inset

 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

'''
\end_layout

\begin_layout Plain Layout

Optimizes an OPF model's parameters based on some data.
\end_layout

\begin_layout Plain Layout

Based on https://github.com/numenta/nupic/tree/master/examples/opf/clients/hotgym
/prediction/one_gym
\end_layout

\begin_layout Plain Layout

'''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

import pprint
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from nupic.swarming import permutations_runner
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def write_model_params(cwd, model_params, model_name=None):
\end_layout

\begin_layout Plain Layout

    if model_name is None:
\end_layout

\begin_layout Plain Layout

        out_dir = os.path.join(cwd, 'model_params')
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        out_dir = os.path.join(cwd, '{}_model_params'.format(model_name))
\end_layout

\begin_layout Plain Layout

    if not os.path.isdir(out_dir):
\end_layout

\begin_layout Plain Layout

        os.mkdir(out_dir)
\end_layout

\begin_layout Plain Layout

    model_params_init = os.path.join(out_dir, '__init__.py')
\end_layout

\begin_layout Plain Layout

    with open(model_params_init, 'w') as f:
\end_layout

\begin_layout Plain Layout

        f.write('
\backslash
n')
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    out_path = os.path.join(out_dir, 'model_params.py')
\end_layout

\begin_layout Plain Layout

    pp = pprint.PrettyPrinter(indent=4)
\end_layout

\begin_layout Plain Layout

    model_params_str = pp.pformat(model_params)
\end_layout

\begin_layout Plain Layout

    with open(out_path, 'wb') as out_file:
\end_layout

\begin_layout Plain Layout

        out_file.write('MODEL_PARAMS = (
\backslash
n{}
\backslash
n)'.format(model_params_str))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def swarm(cwd, input_file, swarm_description, model_name=None,
\end_layout

\begin_layout Plain Layout

          write_model=False, max_workers=4):
\end_layout

\begin_layout Plain Layout

    swarm_work_dir = os.path.abspath('swarm')
\end_layout

\begin_layout Plain Layout

    if not os.path.exists(swarm_work_dir):
\end_layout

\begin_layout Plain Layout

        os.mkdir(swarm_work_dir)
\end_layout

\begin_layout Plain Layout

    stream = swarm_description['streamDef']['streams'][0]
\end_layout

\begin_layout Plain Layout

    full_path = os.path.join(cwd, input_file)
\end_layout

\begin_layout Plain Layout

    stream['source'] = 'file://{}'.format(full_path)
\end_layout

\begin_layout Plain Layout

    label = swarm_description['streamDef']['info']
\end_layout

\begin_layout Plain Layout

    model_params = permutations_runner.runWithConfig(
\end_layout

\begin_layout Plain Layout

                                      swarm_description,
\end_layout

\begin_layout Plain Layout

                                      {'maxWorkers': max_workers,
\end_layout

\begin_layout Plain Layout

                                       'overwrite': True},
\end_layout

\begin_layout Plain Layout

                                      outputLabel=label,
\end_layout

\begin_layout Plain Layout

                                      outDir=swarm_work_dir,
\end_layout

\begin_layout Plain Layout

                                      permWorkDir=swarm_work_dir
\end_layout

\begin_layout Plain Layout

                                                    )
\end_layout

\begin_layout Plain Layout

    if write_model:
\end_layout

\begin_layout Plain Layout

        write_model_params(cwd, model_params, model_name)
\end_layout

\begin_layout Plain Layout

    return model_params
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    from swarm_description import SWARM_DESCRIPTION
\end_layout

\begin_layout Plain Layout

    import sys
\end_layout

\begin_layout Plain Layout

    args = sys.argv
\end_layout

\begin_layout Plain Layout

    if '--input_file' in args:
\end_layout

\begin_layout Plain Layout

        input_file = args[args.index('--input_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        input_file = 'data.csv'
\end_layout

\begin_layout Plain Layout

    if '--cwd' in args:
\end_layout

\begin_layout Plain Layout

        cwd = args[args.index('--cwd') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        cwd = os.getcwd()
\end_layout

\begin_layout Plain Layout

    swarm(cwd, input_file, SWARM_DESCRIPTION)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{
\end_layout

\end_inset

caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

cla.py
\begin_inset ERT
status open

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "src:cla_py"

\end_inset

 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

'''
\end_layout

\begin_layout Plain Layout

Feeds data to a OPF model.
\end_layout

\begin_layout Plain Layout

Based on https://github.com/numenta/nupic/tree/master/examples/opf/clients/hotgym
/prediction/one_gym
\end_layout

\begin_layout Plain Layout

'''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

import dateutil.parser as du_parser
\end_layout

\begin_layout Plain Layout

import csv
\end_layout

\begin_layout Plain Layout

import importlib
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from nupic.data.inference_shifter import InferenceShifter
\end_layout

\begin_layout Plain Layout

from nupic.frameworks.opf.modelfactory import ModelFactory
\end_layout

\begin_layout Plain Layout

import cla_output as nupic_output
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def create_model(params, predictedField):
\end_layout

\begin_layout Plain Layout

    model = ModelFactory.create(params)
\end_layout

\begin_layout Plain Layout

    model.enableInference({'predictedField': predictedField})
\end_layout

\begin_layout Plain Layout

    return model
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def process_row(row, fields, predicted_field, model, shifter,
\end_layout

\begin_layout Plain Layout

                output_handler, counter):
\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

    Updates the model with the row's data.
 row[0] should have the timestamp,
\end_layout

\begin_layout Plain Layout

    row[1:] should correspond to fields.
\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

    if counter % 100 == 0:
\end_layout

\begin_layout Plain Layout

        print 'read {} lines'.format(counter)
\end_layout

\begin_layout Plain Layout

    timestamp = du_parser.parse(row[0])
\end_layout

\begin_layout Plain Layout

    input_dict = {'timestamp': timestamp}
\end_layout

\begin_layout Plain Layout

    values = [0]*len(fields)
\end_layout

\begin_layout Plain Layout

    for i, field in enumerate(fields, 1):
\end_layout

\begin_layout Plain Layout

        input_dict[field] = float(row[i])
\end_layout

\begin_layout Plain Layout

        values[i-1] = input_dict[field]
\end_layout

\begin_layout Plain Layout

        if field == predicted_field:
\end_layout

\begin_layout Plain Layout

            p_val = input_dict[field]
\end_layout

\begin_layout Plain Layout

    result = model.run(input_dict)
\end_layout

\begin_layout Plain Layout

    result = shifter.shift(result)
\end_layout

\begin_layout Plain Layout

    prediction = result.inferences['multiStepBestPredictions'][1]
\end_layout

\begin_layout Plain Layout

    anomalyScore = result.inferences['anomalyScore']
\end_layout

\begin_layout Plain Layout

    output_handler.write(timestamp, p_val, prediction, anomalyScore, values=value
s)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def open_input_file(input_file):
\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

    Opens input_file and returns a file pointer to it, together with a
\end_layout

\begin_layout Plain Layout

    csv reader and the fields inferred from the file's header
\end_layout

\begin_layout Plain Layout

    (excepting the timestamp field).
\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

    input_file = open(input_file, 'rb')
\end_layout

\begin_layout Plain Layout

    csv_reader = csv.reader(input_file)
\end_layout

\begin_layout Plain Layout

    # get column names
\end_layout

\begin_layout Plain Layout

    fields = csv_reader.next()
\end_layout

\begin_layout Plain Layout

    fields = [f for f in fields if 'timestamp' not in f]
\end_layout

\begin_layout Plain Layout

    # skip header rows
\end_layout

\begin_layout Plain Layout

    csv_reader.next()
\end_layout

\begin_layout Plain Layout

    csv_reader.next()
\end_layout

\begin_layout Plain Layout

    return fields, csv_reader, input_file
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def prepare_run(fields, predicted_field, plot, output_name):
\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

    Creates an output handler and inference shifter to use when performing
\end_layout

\begin_layout Plain Layout

    model learning.
\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

    if plot:
\end_layout

\begin_layout Plain Layout

        output = nupic_output.NuPICPlotOutput(y_label=predicted_field, name=outpu
t_name)
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        output = nupic_output.NuPICFileOutput(columns=fields + ['prediction'],
\end_layout

\begin_layout Plain Layout

                                              name=output_name)
\end_layout

\begin_layout Plain Layout

    shifter = InferenceShifter()
\end_layout

\begin_layout Plain Layout

    return shifter, output
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def run_model(model, input_file, output_name, plot, predicted_field):
\end_layout

\begin_layout Plain Layout

    fields, csv_reader, input_file = open_input_file(input_file=input_file)
\end_layout

\begin_layout Plain Layout

    shifter, output = prepare_run(fields, predicted_field,
\end_layout

\begin_layout Plain Layout

                                  plot, output_name)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    counter = 0
\end_layout

\begin_layout Plain Layout

    for row in csv_reader:
\end_layout

\begin_layout Plain Layout

        counter += 1
\end_layout

\begin_layout Plain Layout

        process_row(row, fields, predicted_field, model, shifter, output,
 counter)
\end_layout

\begin_layout Plain Layout

    input_file.close()
\end_layout

\begin_layout Plain Layout

    output.close()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main(cwd, input_file, output_name, plot, predicted_field, 
\end_layout

\begin_layout Plain Layout

         model_params=None, model_name=None):
\end_layout

\begin_layout Plain Layout

    if model_params is None:
\end_layout

\begin_layout Plain Layout

        sep = os.path.sep
\end_layout

\begin_layout Plain Layout

        rel_path = os.path.relpath(cwd).replace(sep, '.')
\end_layout

\begin_layout Plain Layout

        if model_name is None:
\end_layout

\begin_layout Plain Layout

            package_name = '{}.model_params.model_params'.format(rel_path)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            package_name = ('{}.{}_model_params.model_params'
\end_layout

\begin_layout Plain Layout

                            .format(rel_path, model_name))
\end_layout

\begin_layout Plain Layout

        print 'Package name: {}'.format(package_name)
\end_layout

\begin_layout Plain Layout

        package = importlib.import_module(package_name)
\end_layout

\begin_layout Plain Layout

        model_params = package.MODEL_PARAMS
\end_layout

\begin_layout Plain Layout

    model = create_model(model_params, predicted_field)
\end_layout

\begin_layout Plain Layout

    run_model(model=model, input_file=input_file, output_name=output_name,
\end_layout

\begin_layout Plain Layout

              plot=plot, predicted_field=predicted_field)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    import sys
\end_layout

\begin_layout Plain Layout

    plot = False
\end_layout

\begin_layout Plain Layout

    args = sys.argv[1:]
\end_layout

\begin_layout Plain Layout

    if "--input_file" in args:
\end_layout

\begin_layout Plain Layout

        input_file = index_col = args[args.index('--input_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        input_file = 'data.csv'
\end_layout

\begin_layout Plain Layout

    if "--plot" in args:
\end_layout

\begin_layout Plain Layout

        plot = True
\end_layout

\begin_layout Plain Layout

    if "--output_name" in args:
\end_layout

\begin_layout Plain Layout

        output_name = index_col = args[args.index('--output_name') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        output_name = 'data'
\end_layout

\begin_layout Plain Layout

    main(input_file, output_name, plot)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{
\end_layout

\end_inset

caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

utils.py
\begin_inset ERT
status open

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "src:utils_py"

\end_inset

 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

from __future__ import division, print_function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import inspect
\end_layout

\begin_layout Plain Layout

from datetime import timedelta
\end_layout

\begin_layout Plain Layout

import shutil
\end_layout

\begin_layout Plain Layout

import csv
\end_layout

\begin_layout Plain Layout

import re
\end_layout

\begin_layout Plain Layout

import seaborn as sns
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def fill_annotations(df, field, anomaly_match, spans_field=None,
\end_layout

\begin_layout Plain Layout

                     method='fill', mean=None, std=None):
\end_layout

\begin_layout Plain Layout

    if spans_field is None:
\end_layout

\begin_layout Plain Layout

        spans_field = field
\end_layout

\begin_layout Plain Layout

    if method == 'fill':
\end_layout

\begin_layout Plain Layout

        first_timestamp = None
\end_layout

\begin_layout Plain Layout

        last_anomaly = None
\end_layout

\begin_layout Plain Layout

        previous_timestamp = None
\end_layout

\begin_layout Plain Layout

        for i in df.index:
\end_layout

\begin_layout Plain Layout

            current_value = str(df.loc[i, field])
\end_layout

\begin_layout Plain Layout

            is_anomaly_match = re.match(anomaly_match, current_value)
\end_layout

\begin_layout Plain Layout

            if is_anomaly_match:
\end_layout

\begin_layout Plain Layout

                if first_timestamp is not None and last_anomaly == current_value
:
\end_layout

\begin_layout Plain Layout

                    df[first_timestamp:previous_timestamp][spans_field]
 = last_anomaly
\end_layout

\begin_layout Plain Layout

                first_timestamp = i
\end_layout

\begin_layout Plain Layout

                last_anomaly = current_value
\end_layout

\begin_layout Plain Layout

            previous_timestamp = i
\end_layout

\begin_layout Plain Layout

    elif method == 'pad':
\end_layout

\begin_layout Plain Layout

        for i in df.index:
\end_layout

\begin_layout Plain Layout

            current_value = str(df.loc[i, field])
\end_layout

\begin_layout Plain Layout

            is_anomaly_match = re.match(anomaly_match, current_value)
\end_layout

\begin_layout Plain Layout

            if is_anomaly_match:
\end_layout

\begin_layout Plain Layout

                pad = std*np.random.randn() + mean
\end_layout

\begin_layout Plain Layout

                start = i - timedelta(seconds=pad/2)
\end_layout

\begin_layout Plain Layout

                stop = i + timedelta(seconds=pad/2)
\end_layout

\begin_layout Plain Layout

                df[start:i][spans_field] = current_value
\end_layout

\begin_layout Plain Layout

                df[i:stop][spans_field] = current_value
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ValueError('method {} not recognized.'.format(method))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def prepare_dataset(file_path, sampling_rate_str='20L', out_file_path=None):
\end_layout

\begin_layout Plain Layout

    file_dir = os.path.dirname(file_path)
\end_layout

\begin_layout Plain Layout

    tmp_path = os.path.join(file_dir, 'tmp.csv')
\end_layout

\begin_layout Plain Layout

    # Load dataset into a csv reader,
\end_layout

\begin_layout Plain Layout

    # format column names, format timestamps
\end_layout

\begin_layout Plain Layout

    # and save it.
\end_layout

\begin_layout Plain Layout

    print('Formatting column names, and timestamps on file {}...'
\end_layout

\begin_layout Plain Layout

          .format(file_path))
\end_layout

\begin_layout Plain Layout

    with open(file_path, 'rb') as r:
\end_layout

\begin_layout Plain Layout

        reader = csv.reader(r, quotechar="'")
\end_layout

\begin_layout Plain Layout

        with open(tmp_path, 'wb') as w:
\end_layout

\begin_layout Plain Layout

            writer = csv.writer(w)
\end_layout

\begin_layout Plain Layout

            header = reader.next()
\end_layout

\begin_layout Plain Layout

            header[0] = 'timestamp'
\end_layout

\begin_layout Plain Layout

            header[1:] = [h.strip() for h in header[1:]]
\end_layout

\begin_layout Plain Layout

            writer.writerow(header)
\end_layout

\begin_layout Plain Layout

            reader.next()
\end_layout

\begin_layout Plain Layout

            for row in reader:
\end_layout

\begin_layout Plain Layout

                row[0] = row[0].strip('[]')
\end_layout

\begin_layout Plain Layout

                for i, item in enumerate(row[1:], 1):
\end_layout

\begin_layout Plain Layout

                    try:
\end_layout

\begin_layout Plain Layout

                        row[i] = float(item)
\end_layout

\begin_layout Plain Layout

                    except:
\end_layout

\begin_layout Plain Layout

                        row[i] = np.nan
\end_layout

\begin_layout Plain Layout

                writer.writerow(row) 
\end_layout

\begin_layout Plain Layout

    shutil.move(tmp_path, file_path)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # Load dataset into a DataFrame,
\end_layout

\begin_layout Plain Layout

    # resample at 20 microseconds
\end_layout

\begin_layout Plain Layout

    # and save it.
\end_layout

\begin_layout Plain Layout

    print('Resampling...')
\end_layout

\begin_layout Plain Layout

    df = pd.read_csv(file_path, parse_dates=True, index_col='timestamp',
\end_layout

\begin_layout Plain Layout

                     dayfirst=True, low_memory=False)
\end_layout

\begin_layout Plain Layout

    df = df.resample(sampling_rate_str)
\end_layout

\begin_layout Plain Layout

    df.fillna(method='ffill', inplace=True)
\end_layout

\begin_layout Plain Layout

    df.fillna(method='bfill', inplace=True)
\end_layout

\begin_layout Plain Layout

    df.to_csv(file_path)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # Load dataset into a csv reader,
\end_layout

\begin_layout Plain Layout

    # add header rows needed for HTM
\end_layout

\begin_layout Plain Layout

    # and save it.
\end_layout

\begin_layout Plain Layout

    print('Adding rows needed for HTM...')
\end_layout

\begin_layout Plain Layout

    with open(file_path, 'rb') as r:
\end_layout

\begin_layout Plain Layout

        reader = csv.reader(r)
\end_layout

\begin_layout Plain Layout

        with open(tmp_path, 'wb') as w:
\end_layout

\begin_layout Plain Layout

            writer = csv.writer(w)
\end_layout

\begin_layout Plain Layout

            header = reader.next()
\end_layout

\begin_layout Plain Layout

            writer.writerow(header)
\end_layout

\begin_layout Plain Layout

            writer.writerow(['datetime'] + ['float' for _ in header[1:]])
\end_layout

\begin_layout Plain Layout

            writer.writerow(['T'] + [None for _ in header[1:]])
\end_layout

\begin_layout Plain Layout

            writer.writerows(reader) 
\end_layout

\begin_layout Plain Layout

    shutil.move(tmp_path, file_path)
\end_layout

\begin_layout Plain Layout

    if out_file_path is not None:
\end_layout

\begin_layout Plain Layout

        shutil.copy(file_path, out_file_path)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def find_segment_with_most_annotations(df, field, match, segment_tdelta):
\end_layout

\begin_layout Plain Layout

    indexer = df[field].str.match(match, na=False, as_indexer=True)
\end_layout

\begin_layout Plain Layout

    df = df[indexer]
\end_layout

\begin_layout Plain Layout

    d = df.index.min()
\end_layout

\begin_layout Plain Layout

    d -= timedelta(seconds=d.second, microseconds=d.microsecond)
\end_layout

\begin_layout Plain Layout

    anomalies = []
\end_layout

\begin_layout Plain Layout

    while d <= df.index.max():
\end_layout

\begin_layout Plain Layout

        init = max(d - segment_tdelta, df.index.min())
\end_layout

\begin_layout Plain Layout

        s = slice(init, d)
\end_layout

\begin_layout Plain Layout

        ddf = df[s]
\end_layout

\begin_layout Plain Layout

        if len(ddf) > 0:
\end_layout

\begin_layout Plain Layout

            anomalies.append((s, len(ddf)))
\end_layout

\begin_layout Plain Layout

        d += timedelta(minutes=1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return max(anomalies, key=lambda x: x[1])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def read_annotations(file_path, columns, sampling_rate=None, quotechar='"'):
    
\end_layout

\begin_layout Plain Layout

    print('Reading annotations...')
\end_layout

\begin_layout Plain Layout

    anndf = pd.read_csv(file_path, parse_dates=True,
\end_layout

\begin_layout Plain Layout

                        index_col='timestamp', quotechar=quotechar)
\end_layout

\begin_layout Plain Layout

    if sampling_rate is not None:
\end_layout

\begin_layout Plain Layout

        tmp = []
\end_layout

\begin_layout Plain Layout

        print('Resampling annotations...')
\end_layout

\begin_layout Plain Layout

        for r in anndf.iterrows():
\end_layout

\begin_layout Plain Layout

            new_index = r[0]
\end_layout

\begin_layout Plain Layout

            new_index += timedelta(microseconds=sampling_rate -
\end_layout

\begin_layout Plain Layout

                                                r[0].microsecond%sampling_rate)
\end_layout

\begin_layout Plain Layout

            tmp.append([new_index] + list(r[1]))
\end_layout

\begin_layout Plain Layout

        anndf = pd.DataFrame(tmp, columns=['timestamp', 'SampleNro', 'Type',
\end_layout

\begin_layout Plain Layout

                                           'Sub', 'Chan', 'Num', 'Aux'])
\end_layout

\begin_layout Plain Layout

        anndf = anndf.set_index('timestamp')
\end_layout

\begin_layout Plain Layout

    anndf[columns] = anndf[columns].astype(np.str)
\end_layout

\begin_layout Plain Layout

    return anndf
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def _plot_annotations(annotations, df, column, ytext, ax,
\end_layout

\begin_layout Plain Layout

                      spans_column=None, span_match='',
\end_layout

\begin_layout Plain Layout

                      annotation_index=-2, annotate=True):
\end_layout

\begin_layout Plain Layout

    for r in annotations.iteritems():
\end_layout

\begin_layout Plain Layout

        x = ax.convert_xunits(r[0])
\end_layout

\begin_layout Plain Layout

        if annotate:
\end_layout

\begin_layout Plain Layout

            y = ax.convert_yunits(df[column][r[0]])
\end_layout

\begin_layout Plain Layout

            ax.annotate(r[1], xy=(x, y), xytext=(x, ytext))
\end_layout

\begin_layout Plain Layout

        ax.axvline(x, color='r', linewidth=0.75)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    if spans_column is not None:
\end_layout

\begin_layout Plain Layout

        df['block'] = (df[spans_column].shift(1) != df[spans_column])
\end_layout

\begin_layout Plain Layout

        df['block'] = df['block'].astype(int).cumsum()
\end_layout

\begin_layout Plain Layout

        indexer = df[spans_column].str.match(span_match, na=False,
\end_layout

\begin_layout Plain Layout

                                            as_indexer=True)
\end_layout

\begin_layout Plain Layout

        g = df[indexer].reset_index().groupby([spans_column, 'block'])
\end_layout

\begin_layout Plain Layout

        groups = g.apply(lambda x: np.array(x))
\end_layout

\begin_layout Plain Layout

        p2 = sns.color_palette('Paired')
\end_layout

\begin_layout Plain Layout

        for i, group in enumerate(groups):
\end_layout

\begin_layout Plain Layout

            ax.axvspan(group[0][0], group[-1][0], color=p2[i%len(p2)],
\end_layout

\begin_layout Plain Layout

                        alpha=0.5, label=group[0][annotation_index])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def plot_results(df, data_columns, score_column, likelihood_column,
\end_layout

\begin_layout Plain Layout

                 match, slce=None, show_plot=True, save_plot=False,
\end_layout

\begin_layout Plain Layout

                 cut_percentile=75, axhlines=[0.5, 0.97725, 0.999968],
\end_layout

\begin_layout Plain Layout

                 spans_column=None, normalize_columns=False,
\end_layout

\begin_layout Plain Layout

                 second_data_columns=None, annotate=None):
\end_layout

\begin_layout Plain Layout

    import matplotlib as mpl
\end_layout

\begin_layout Plain Layout

    mpl.use('Agg')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    import pylab
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if slce is not None:
\end_layout

\begin_layout Plain Layout

        df = df[slce]
\end_layout

\begin_layout Plain Layout

    df = df.copy()
\end_layout

\begin_layout Plain Layout

    m_data = np.max(df[data_columns])[0]
\end_layout

\begin_layout Plain Layout

    m_score = np.max(df[score_column])
\end_layout

\begin_layout Plain Layout

    indexer = df.Annotation.str.match(match, na=False, as_indexer=True)
\end_layout

\begin_layout Plain Layout

    annotations = df.Annotation[indexer]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if normalize_columns:
\end_layout

\begin_layout Plain Layout

        for c in data_columns:
\end_layout

\begin_layout Plain Layout

            min_c = df[c].min()
\end_layout

\begin_layout Plain Layout

            max_c = df[c].max()
\end_layout

\begin_layout Plain Layout

            df[c] = (df[c] - min_c)/(max_c - min_c)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    annotate = (spans_column is None and annotate is None) or annotate
\end_layout

\begin_layout Plain Layout

    data_colspan = 2
\end_layout

\begin_layout Plain Layout

    if second_data_columns is not None:
\end_layout

\begin_layout Plain Layout

        data_colspan = 1
\end_layout

\begin_layout Plain Layout

        if normalize_columns:
\end_layout

\begin_layout Plain Layout

            for c in second_data_columns:
\end_layout

\begin_layout Plain Layout

                min_c = df[c].min()
\end_layout

\begin_layout Plain Layout

                max_c = df[c].max()
\end_layout

\begin_layout Plain Layout

                df[c] = (df[c] - min_c)/(max_c - min_c)
\end_layout

\begin_layout Plain Layout

    with sns.color_palette('Set2') as p:
\end_layout

\begin_layout Plain Layout

        f = pylab.figure()
\end_layout

\begin_layout Plain Layout

        ax1 = pylab.subplot2grid((6,1), (0, 0), rowspan=data_colspan)
\end_layout

\begin_layout Plain Layout

        df[data_columns].plot(ax=ax1, alpha=0.7)
\end_layout

\begin_layout Plain Layout

        ax1.set_ylabel(str(data_columns))
\end_layout

\begin_layout Plain Layout

        _plot_annotations(annotations, df, data_columns[0], m_data, ax1,
\end_layout

\begin_layout Plain Layout

                          annotate=annotate)
\end_layout

\begin_layout Plain Layout

        pylab.legend()
\end_layout

\begin_layout Plain Layout

        if second_data_columns is not None:
\end_layout

\begin_layout Plain Layout

            ax11 = pylab.subplot2grid((6,1), (1, 0), sharex=ax1)
\end_layout

\begin_layout Plain Layout

            df[second_data_columns].plot(ax=ax11, alpha=0.7)
\end_layout

\begin_layout Plain Layout

            ax11.set_ylabel(str(second_data_columns))
\end_layout

\begin_layout Plain Layout

            _plot_annotations(annotations, df, second_data_columns[0],
\end_layout

\begin_layout Plain Layout

                              m_data, ax11, annotate=annotate)
\end_layout

\begin_layout Plain Layout

            pylab.legend()
\end_layout

\begin_layout Plain Layout

        ax2 = pylab.subplot2grid((6,1), (2, 0), rowspan=2, sharex=ax1)
\end_layout

\begin_layout Plain Layout

        df[likelihood_column].plot(ax=ax2, color=p[1], alpha=0.7,
\end_layout

\begin_layout Plain Layout

                                   ylim=(0, 1.2))
\end_layout

\begin_layout Plain Layout

        ax2.set_ylabel(likelihood_column)
\end_layout

\begin_layout Plain Layout

        for hline in axhlines:
\end_layout

\begin_layout Plain Layout

            ax2.axhline(hline, color='b', linewidth=0.75)
\end_layout

\begin_layout Plain Layout

        _plot_annotations(annotations, df, data_columns[0],
\end_layout

\begin_layout Plain Layout

                          1.1, ax2, spans_column, span_match=match,
\end_layout

\begin_layout Plain Layout

                          annotate=annotate)
\end_layout

\begin_layout Plain Layout

        pylab.legend(fancybox=True, frameon=True,
\end_layout

\begin_layout Plain Layout

                     bbox_to_anchor=(1, 0.5), loc='center left')
\end_layout

\begin_layout Plain Layout

        ax3 = pylab.subplot2grid((6,1), (4, 0), rowspan=2, sharex=ax1)
\end_layout

\begin_layout Plain Layout

        scores = df[score_column]
\end_layout

\begin_layout Plain Layout

        upper_percentile = np.percentile(scores, cut_percentile)
\end_layout

\begin_layout Plain Layout

        scores[scores > upper_percentile] = upper_percentile
\end_layout

\begin_layout Plain Layout

        scores.plot(ax=ax3, color=p[2], alpha=0.7)
\end_layout

\begin_layout Plain Layout

        ax3.set_ylabel(score_column)
\end_layout

\begin_layout Plain Layout

        _plot_annotations(annotations, df, data_columns[0], m_score, ax3,
\end_layout

\begin_layout Plain Layout

                          annotate=annotate)
\end_layout

\begin_layout Plain Layout

        pylab.legend()
\end_layout

\begin_layout Plain Layout

    return f
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def f1_score(thrs, df, col, match, annotation_column='Annotation',
\end_layout

\begin_layout Plain Layout

             scalar=False, invert_score=False):
\end_layout

\begin_layout Plain Layout

    detected = len(df[df[col] >thrs])
\end_layout

\begin_layout Plain Layout

    annotation_indexer = df[annotation_column].str.match(match, na=False,
\end_layout

\begin_layout Plain Layout

                                                 as_indexer=True)
\end_layout

\begin_layout Plain Layout

    col_thrs = df[col] > thrs
\end_layout

\begin_layout Plain Layout

    real = len(df[annotation_indexer])
\end_layout

\begin_layout Plain Layout

    true_positives = len(df[col_thrs & annotation_indexer])
\end_layout

\begin_layout Plain Layout

    false_positives = len(df[col_thrs & ~annotation_indexer])
\end_layout

\begin_layout Plain Layout

    false_negatives = len(df[~col_thrs & annotation_indexer])
\end_layout

\begin_layout Plain Layout

    if true_positives > 0:
\end_layout

\begin_layout Plain Layout

        precision = true_positives/(true_positives + false_positives)
\end_layout

\begin_layout Plain Layout

        recall = true_positives/(true_positives + false_negatives)
\end_layout

\begin_layout Plain Layout

        score = 2*(precision*recall)/(precision+recall)
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        precision = 0
\end_layout

\begin_layout Plain Layout

        recall = 0
\end_layout

\begin_layout Plain Layout

        score = 0
\end_layout

\begin_layout Plain Layout

    if invert_score:
\end_layout

\begin_layout Plain Layout

        score = 1 - score
\end_layout

\begin_layout Plain Layout

    if scalar:
\end_layout

\begin_layout Plain Layout

        return score
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        return {'column': col, 'threshold': thrs, 'detected': detected,
\end_layout

\begin_layout Plain Layout

                'real': real, 'true_positives': true_positives,
\end_layout

\begin_layout Plain Layout

                'false_positives': false_positives,
\end_layout

\begin_layout Plain Layout

                'false_negatives': false_negatives,
\end_layout

\begin_layout Plain Layout

                'precision': precision, 'recall': recall, 'F1': score}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{
\end_layout

\end_inset

caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

run_motion-artifact_eeg_1.py
\begin_inset ERT
status open

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "src:run_motion-artifact_eeg_1_py"

\end_inset

 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

from __future__ import division, print_function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import inspect
\end_layout

\begin_layout Plain Layout

from datetime import timedelta, datetime
\end_layout

\begin_layout Plain Layout

import shutil
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import utils
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def set_annotations_and_plot(file_name, anndf, likelohood_column, plot):
\end_layout

\begin_layout Plain Layout

    print('Reading results...')
\end_layout

\begin_layout Plain Layout

    df = pd.read_csv(file_name, parse_dates=True, index_col='timestamp')
\end_layout

\begin_layout Plain Layout

    df['Annotation'] = anndf.Annotation
\end_layout

\begin_layout Plain Layout

    print('Writing annotated results...')
\end_layout

\begin_layout Plain Layout

    df.to_csv(file_name)
\end_layout

\begin_layout Plain Layout

    if plot:
\end_layout

\begin_layout Plain Layout

        utils.plot_results(df, 'ACC_z1', 'anomaly_score',
\end_layout

\begin_layout Plain Layout

                           likelohood_column, '[A-F]')
\end_layout

\begin_layout Plain Layout

    return df
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def fill_swarm_description(file_path, buffer_len, predicted_field):
\end_layout

\begin_layout Plain Layout

    swarm_desc = {
\end_layout

\begin_layout Plain Layout

        'includedFields': [
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'timestamp',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'datetime',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'ACC_z1',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

        ],
\end_layout

\begin_layout Plain Layout

        'streamDef': {
\end_layout

\begin_layout Plain Layout

            'info': 'motion-artifact_eeg_1',
\end_layout

\begin_layout Plain Layout

            'version': 1,
\end_layout

\begin_layout Plain Layout

            'streams': [
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                    'info': 'motion-artifact_eeg_1',
\end_layout

\begin_layout Plain Layout

                    'source': file_path,
\end_layout

\begin_layout Plain Layout

                    'columns': ['*']
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            ]
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        'inferenceType': 'TemporalAnomaly',
\end_layout

\begin_layout Plain Layout

        'inferenceArgs': {
\end_layout

\begin_layout Plain Layout

            'predictionSteps': [1],
\end_layout

\begin_layout Plain Layout

            'predictedField': predicted_field
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        'iterationCount': buffer_len,
\end_layout

\begin_layout Plain Layout

        'swarmSize': 'large'
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return swarm_desc
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main(cwd, do_amgng, amgng_file, ma_window, ma_recalc_delay,
\end_layout

\begin_layout Plain Layout

         do_cla, cla_file, buffer_len, plot):
\end_layout

\begin_layout Plain Layout

    values = inspect.getargvalues(inspect.currentframe())[3]
\end_layout

\begin_layout Plain Layout

    print('using parameters: {}'.format(values))
\end_layout

\begin_layout Plain Layout

    annotations_path = os.path.join(cwd, 'annotations.csv')
\end_layout

\begin_layout Plain Layout

    anndf = utils.read_annotations(annotations_path, ['Annotation'])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    amgng_df = None
\end_layout

\begin_layout Plain Layout

    if do_amgng:
\end_layout

\begin_layout Plain Layout

        from mgng.amgng import main as amgng_main
\end_layout

\begin_layout Plain Layout

        print('Training AMGNG model...')
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_amgng_{}'.format(amgng_file))
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, amgng_file)
\end_layout

\begin_layout Plain Layout

        start = datetime.now()
\end_layout

\begin_layout Plain Layout

        amgng_main(input_file=full_path, output_file=out_file,
\end_layout

\begin_layout Plain Layout

                   buffer_len=buffer_len, index_col='timestamp',
\end_layout

\begin_layout Plain Layout

                   skip_rows=[1,2], ma_window=ma_window,
\end_layout

\begin_layout Plain Layout

                   ma_recalc_delay=ma_recalc_delay)
\end_layout

\begin_layout Plain Layout

        amgng_time = datetime.now() - start
\end_layout

\begin_layout Plain Layout

        amgng_df = set_annotations_and_plot(out_file, anndf,
\end_layout

\begin_layout Plain Layout

                                            'anomaly_density', plot)
\end_layout

\begin_layout Plain Layout

        amgng_df['AnnotationSpans'] = amgng_df.Annotation.copy()
\end_layout

\begin_layout Plain Layout

        utils.fill_annotations(amgng_df, 'AnnotationSpans', '[A-F]')
\end_layout

\begin_layout Plain Layout

        amgng_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        print('Time taken: amgng={}'.format(amgng_time))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    cla_df = None
\end_layout

\begin_layout Plain Layout

    if do_cla:
\end_layout

\begin_layout Plain Layout

        from cla.swarm import swarm
\end_layout

\begin_layout Plain Layout

        from cla.cla import create_model, open_input_file
\end_layout

\begin_layout Plain Layout

        from cla.cla import  prepare_run, process_row
\end_layout

\begin_layout Plain Layout

        print('Training CLA model...')
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, cla_file)
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_cla_{}'.format(cla_file))
\end_layout

\begin_layout Plain Layout

        cla_model = {}
\end_layout

\begin_layout Plain Layout

        fields, csv_reader, input_handler = open_input_file(full_path)
\end_layout

\begin_layout Plain Layout

        start = datetime.now()
\end_layout

\begin_layout Plain Layout

        for p in fields:
\end_layout

\begin_layout Plain Layout

            swarm_desc = fill_swarm_description(full_path, buffer_len, p)
\end_layout

\begin_layout Plain Layout

            model_params = swarm(cwd=cwd, input_file=cla_file,
\end_layout

\begin_layout Plain Layout

                                 swarm_description=swarm_desc)
\end_layout

\begin_layout Plain Layout

            model = create_model(params=model_params, predictedField=p)
\end_layout

\begin_layout Plain Layout

            model_out_file = os.path.join(cwd, '{}_{}'.format(p, cla_file))
\end_layout

\begin_layout Plain Layout

            shifter, output_handler = prepare_run(fields=fields,
\end_layout

\begin_layout Plain Layout

                                                  predicted_field=p,
\end_layout

\begin_layout Plain Layout

                                                  plot=False,
\end_layout

\begin_layout Plain Layout

                                                  output_name=model_out_file)
\end_layout

\begin_layout Plain Layout

            cla_model[p] = {'model': model, 'shifter': shifter,
\end_layout

\begin_layout Plain Layout

                            'output_handler': output_handler,
\end_layout

\begin_layout Plain Layout

                            'model_out_file': model_out_file}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        swarm_time = datetime.now() - start
\end_layout

\begin_layout Plain Layout

        start = datetime.now()
\end_layout

\begin_layout Plain Layout

        for i, row in enumerate(csv_reader):
\end_layout

\begin_layout Plain Layout

            for p in fields:
\end_layout

\begin_layout Plain Layout

                process_row(row=row, fields=fields, predicted_field=p,
\end_layout

\begin_layout Plain Layout

                            model=cla_model[p]['model'],
\end_layout

\begin_layout Plain Layout

                            shifter=cla_model[p]['shifter'],
\end_layout

\begin_layout Plain Layout

                            output_handler=cla_model[p]['output_handler'],
\end_layout

\begin_layout Plain Layout

                            counter=i)
\end_layout

\begin_layout Plain Layout

        cla_time = datetime.now() - start
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        input_handler.close()
\end_layout

\begin_layout Plain Layout

        for i, p in enumerate(fields):
\end_layout

\begin_layout Plain Layout

            cla_model[p]['output_handler'].close()
\end_layout

\begin_layout Plain Layout

            df = pd.read_csv(cla_model[p]['model_out_file'], parse_dates=True,
\end_layout

\begin_layout Plain Layout

                             index_col='timestamp')
\end_layout

\begin_layout Plain Layout

            if i == 0:
\end_layout

\begin_layout Plain Layout

                cla_df = df
\end_layout

\begin_layout Plain Layout

            else:
\end_layout

\begin_layout Plain Layout

                cla_df.anomaly_likelihood += df.anomaly_likelihood
\end_layout

\begin_layout Plain Layout

        cla_df.anomaly_likelihood /= len(fields)
\end_layout

\begin_layout Plain Layout

        cla_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        cla_df = set_annotations_and_plot(out_file, anndf,
\end_layout

\begin_layout Plain Layout

                                          'anomaly_likelihood', plot)
\end_layout

\begin_layout Plain Layout

        cla_df['AnnotationSpans'] = cla_df.Annotation.copy()
\end_layout

\begin_layout Plain Layout

        utils.fill_annotations(cla_df, 'AnnotationSpans', '[A-F]')
\end_layout

\begin_layout Plain Layout

        cla_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        print('Time taken: swarm={}, cla={}'.format(swarm_time, cla_time))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return amgng_df, cla_df
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    import sys
\end_layout

\begin_layout Plain Layout

    args = sys.argv
\end_layout

\begin_layout Plain Layout

    if '--do_amgng' in args:
\end_layout

\begin_layout Plain Layout

        do_amgng = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_amgng = False
\end_layout

\begin_layout Plain Layout

    if '--amgng_file' in args:
\end_layout

\begin_layout Plain Layout

        amgng_file = args[args.index('--amgng_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        amgng_file = 'experiments/motion-artifact/acc_z1.csv'
\end_layout

\begin_layout Plain Layout

    if '--do_cla' in args:
\end_layout

\begin_layout Plain Layout

        do_cla = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_cla = False
\end_layout

\begin_layout Plain Layout

    if '--cla_file' in args:
\end_layout

\begin_layout Plain Layout

        cla_file = args[args.index('--cla_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        cla_file = 'experiments/motion-artifact/acc_z1.csv'
\end_layout

\begin_layout Plain Layout

    if '--cwd' in args:
\end_layout

\begin_layout Plain Layout

        cwd = args[args.index('--cwd') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        if do_amgng:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(amgng_file)
\end_layout

\begin_layout Plain Layout

            amgng_file = os.path.basename(amgng_file)
\end_layout

\begin_layout Plain Layout

        elif do_cla:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(cla_file)
\end_layout

\begin_layout Plain Layout

            cla_file = os.path.basename(cla_file)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            cwd = os.getcwd()
\end_layout

\begin_layout Plain Layout

    if '--buffer_len' in args:
\end_layout

\begin_layout Plain Layout

        buffer_len = int(args[args.index('--buffer_len') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        buffer_len = 7000
\end_layout

\begin_layout Plain Layout

    if '--ma_window' in args:
\end_layout

\begin_layout Plain Layout

        ma_window = int(args[args.index('--ma_window') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_window = 2000
\end_layout

\begin_layout Plain Layout

    if '--ma_recalc_delay' in args:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = int(args[args.index('--ma_recalc_delay') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = 1
\end_layout

\begin_layout Plain Layout

    if '--plot' in args:
\end_layout

\begin_layout Plain Layout

        plot = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        plot = False
\end_layout

\begin_layout Plain Layout

    main(cwd=cwd, do_amgng=do_amgng, amgng_file=amgng_file,
\end_layout

\begin_layout Plain Layout

         ma_window=ma_window, do_cla=do_cla, cla_file=cla_file,
\end_layout

\begin_layout Plain Layout

         buffer_len=buffer_len, plot=plot, ma_recalc_delay=ma_recalc_delay)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{
\end_layout

\end_inset

caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

run_ecg1_chfdbchf13.py
\begin_inset ERT
status open

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "src:run_ecg1_chfdbchf13_py"

\end_inset

 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

from __future__ import division, print_function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import inspect
\end_layout

\begin_layout Plain Layout

from datetime import timedelta
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import utils
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main(cwd, do_amgng, amgng_file, ma_window, ma_recalc_delay,
\end_layout

\begin_layout Plain Layout

         do_cla, cla_file, buffer_len, plot):
\end_layout

\begin_layout Plain Layout

    values = inspect.getargvalues(inspect.currentframe())[3]
\end_layout

\begin_layout Plain Layout

    print('using parameters: {}'.format(values))
\end_layout

\begin_layout Plain Layout

    annotations_path = os.path.join(cwd, 'annotations.csv')
\end_layout

\begin_layout Plain Layout

    anndf = utils.read_annotations(annotations_path, ['Type'], 20000)
\end_layout

\begin_layout Plain Layout

    amgng_df = None
\end_layout

\begin_layout Plain Layout

    if do_amgng:
\end_layout

\begin_layout Plain Layout

        from mgng.amgng import main as amgng_main
\end_layout

\begin_layout Plain Layout

        print('Training AMGNG model...')
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_amgng_{}'.format(amgng_file))
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, amgng_file)
\end_layout

\begin_layout Plain Layout

        amgng_main(input_file=full_path, output_file=out_file,
\end_layout

\begin_layout Plain Layout

                   buffer_len=buffer_len, index_col='timestamp',
\end_layout

\begin_layout Plain Layout

                   skip_rows=[1,2], ma_window=ma_window,
\end_layout

\begin_layout Plain Layout

                   ma_recalc_delay=ma_recalc_delay)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        print('Reading results...')
\end_layout

\begin_layout Plain Layout

        amgng_df = pd.read_csv(out_file, parse_dates=True,
\end_layout

\begin_layout Plain Layout

                               index_col='timestamp')
\end_layout

\begin_layout Plain Layout

        amgng_df['Annotation'] = anndf.Type
\end_layout

\begin_layout Plain Layout

        print('Writing annotated results...')
\end_layout

\begin_layout Plain Layout

        amgng_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        if plot:
\end_layout

\begin_layout Plain Layout

            utils.plot_results(amgng_df, ['ECG1'], 'anomaly_score',
\end_layout

\begin_layout Plain Layout

                               'anomaly_density', '[rs]')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    cla_df = None
\end_layout

\begin_layout Plain Layout

    if do_cla:
\end_layout

\begin_layout Plain Layout

        from cla.swarm import swarm
\end_layout

\begin_layout Plain Layout

        from cla.cla import main as cla_main
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_cla_{}'.format(cla_file))
\end_layout

\begin_layout Plain Layout

        print('Training CLA model...')
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, cla_file)
\end_layout

\begin_layout Plain Layout

        SWARM_DESCRIPTION = {
\end_layout

\begin_layout Plain Layout

            'includedFields': [
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                    'fieldName': 'timestamp',
\end_layout

\begin_layout Plain Layout

                    'fieldType': 'datetime',
\end_layout

\begin_layout Plain Layout

                },
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                    'fieldName': 'ECG1',
\end_layout

\begin_layout Plain Layout

                    'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

                },
\end_layout

\begin_layout Plain Layout

            ],
\end_layout

\begin_layout Plain Layout

            'streamDef': {
\end_layout

\begin_layout Plain Layout

                'info': 'chfdbchf13 ECG1',
\end_layout

\begin_layout Plain Layout

                'version': 1,
\end_layout

\begin_layout Plain Layout

                'streams': [
\end_layout

\begin_layout Plain Layout

                    {
\end_layout

\begin_layout Plain Layout

                        'info': 'chfdbchf13',
\end_layout

\begin_layout Plain Layout

                        'source': full_path,
\end_layout

\begin_layout Plain Layout

                        'columns': ['*']
\end_layout

\begin_layout Plain Layout

                    }
\end_layout

\begin_layout Plain Layout

                ]
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            'inferenceType': 'TemporalAnomaly',
\end_layout

\begin_layout Plain Layout

            'inferenceArgs': {
\end_layout

\begin_layout Plain Layout

                'predictionSteps': [1],
\end_layout

\begin_layout Plain Layout

                'predictedField': 'ECG1'
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            'iterationCount': buffer_len,
\end_layout

\begin_layout Plain Layout

            'swarmSize': 'large'
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        swarm(cwd=cwd, input_file=cla_file,
\end_layout

\begin_layout Plain Layout

              swarm_description=SWARM_DESCRIPTION)
\end_layout

\begin_layout Plain Layout

        cla_main(cwd=cwd, input_file=full_path, output_name=out_file, plot=False
,
\end_layout

\begin_layout Plain Layout

                 predicted_field='ECG1')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        print('Reading results...')
\end_layout

\begin_layout Plain Layout

        cla_df = pd.read_csv(out_file, parse_dates=True, index_col='timestamp')
\end_layout

\begin_layout Plain Layout

        cla_df['Annotation'] = anndf.Type
\end_layout

\begin_layout Plain Layout

        print('Writing annotated results...')
\end_layout

\begin_layout Plain Layout

        cla_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        if plot:
\end_layout

\begin_layout Plain Layout

            utils.plot_results(cla_df, ['ECG1'], 'anomaly_score',
\end_layout

\begin_layout Plain Layout

                               'anomaly_likelihood', '[rs]')
\end_layout

\begin_layout Plain Layout

    return amgng_df, cla_df
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    import sys
\end_layout

\begin_layout Plain Layout

    args = sys.argv
\end_layout

\begin_layout Plain Layout

    if '--do_amgng' in args:
\end_layout

\begin_layout Plain Layout

        do_amgng = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_amgng = False
\end_layout

\begin_layout Plain Layout

    if '--amgng_file' in args:
\end_layout

\begin_layout Plain Layout

        amgng_file = args[args.index('--amgng_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        amgng_file = 'experiments/ecg1_chfdbchf13/chfdbchf13_final.csv'
\end_layout

\begin_layout Plain Layout

    if '--do_cla' in args:
\end_layout

\begin_layout Plain Layout

        do_cla = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_cla = False
\end_layout

\begin_layout Plain Layout

    if '--cla_file' in args:
\end_layout

\begin_layout Plain Layout

        cla_file = args[args.index('--cla_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        cla_file = 'experiments/ecg1_chfdbchf13/chfdbchf13_final.csv'
\end_layout

\begin_layout Plain Layout

    if '--cwd' in args:
\end_layout

\begin_layout Plain Layout

        cwd = args[args.index('--cwd') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        if do_amgng:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(amgng_file)
\end_layout

\begin_layout Plain Layout

            amgng_file = os.path.basename(amgng_file)
\end_layout

\begin_layout Plain Layout

        elif do_cla:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(cla_file)
\end_layout

\begin_layout Plain Layout

            cla_file = os.path.basename(cla_file)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            cwd = os.getcwd()
\end_layout

\begin_layout Plain Layout

    if '--buffer_len' in args:
\end_layout

\begin_layout Plain Layout

        buffer_len = int(args[args.index('--buffer_len') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        buffer_len = 300
\end_layout

\begin_layout Plain Layout

    if '--ma_window' in args:
\end_layout

\begin_layout Plain Layout

        ma_window = int(args[args.index('--ma_window') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_window = 300
\end_layout

\begin_layout Plain Layout

    if '--ma_recalc_delay' in args:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = int(args[args.index('--ma_recalc_delay') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = 1
\end_layout

\begin_layout Plain Layout

    if '--plot' in args:
\end_layout

\begin_layout Plain Layout

        plot = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        plot = False
\end_layout

\begin_layout Plain Layout

    main(cwd=cwd, do_amgng=do_amgng, amgng_file=amgng_file,
\end_layout

\begin_layout Plain Layout

         ma_window=ma_window, do_cla=do_cla, cla_file=cla_file,
\end_layout

\begin_layout Plain Layout

         buffer_len=buffer_len, plot=plot, ma_recalc_delay=ma_recalc_delay)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{
\end_layout

\end_inset

caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

run_slpdb_slp37_1d.py
\begin_inset ERT
status open

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "src:run_slpdb_slp37_1d_py"

\end_inset

 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

from __future__ import division, print_function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import inspect
\end_layout

\begin_layout Plain Layout

from datetime import timedelta, datetime
\end_layout

\begin_layout Plain Layout

import shutil
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import utils
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mean_oa = 30.695
\end_layout

\begin_layout Plain Layout

mean_sem = 1.7280555555555557
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def set_annotations_and_plot(file_name, anndf, likelohood_column, plot):
\end_layout

\begin_layout Plain Layout

    print('Reading results...')
\end_layout

\begin_layout Plain Layout

    df = pd.read_csv(file_name, parse_dates=True, index_col='timestamp')
\end_layout

\begin_layout Plain Layout

    df['Annotation'] = anndf.Aux
\end_layout

\begin_layout Plain Layout

    print('Writing annotated results...')
\end_layout

\begin_layout Plain Layout

    df.to_csv(file_name)
\end_layout

\begin_layout Plain Layout

    if plot:
\end_layout

\begin_layout Plain Layout

        utils.plot_results(df, 'Resp', 'anomaly_score',
\end_layout

\begin_layout Plain Layout

                           likelohood_column, '.*[HOXC].*')
\end_layout

\begin_layout Plain Layout

    return df
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def fill_swarm_description(file_path, buffer_len, predicted_field):
\end_layout

\begin_layout Plain Layout

    swarm_desc = {
\end_layout

\begin_layout Plain Layout

        'includedFields': [
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'timestamp',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'datetime',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'Resp',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

        ],
\end_layout

\begin_layout Plain Layout

        'streamDef': {
\end_layout

\begin_layout Plain Layout

            'info': 'slpdb slp37_1d',
\end_layout

\begin_layout Plain Layout

            'version': 1,
\end_layout

\begin_layout Plain Layout

            'streams': [
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                    'info': 'slpdb slp37_1d',
\end_layout

\begin_layout Plain Layout

                    'source': file_path,
\end_layout

\begin_layout Plain Layout

                    'columns': ['*']
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            ]
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        'inferenceType': 'TemporalAnomaly',
\end_layout

\begin_layout Plain Layout

        'inferenceArgs': {
\end_layout

\begin_layout Plain Layout

            'predictionSteps': [1],
\end_layout

\begin_layout Plain Layout

            'predictedField': predicted_field
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        'iterationCount': buffer_len,
\end_layout

\begin_layout Plain Layout

        'swarmSize': 'large'
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return swarm_desc
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main(cwd, do_amgng, amgng_file, ma_window, ma_recalc_delay,
\end_layout

\begin_layout Plain Layout

         do_cla, cla_file, buffer_len, plot):
\end_layout

\begin_layout Plain Layout

    global mean_oa, mean_sem
\end_layout

\begin_layout Plain Layout

    values = inspect.getargvalues(inspect.currentframe())[3]
\end_layout

\begin_layout Plain Layout

    print('using parameters: {}'.format(values))
\end_layout

\begin_layout Plain Layout

    annotations_path = os.path.join(cwd, 'annotations.csv')
\end_layout

\begin_layout Plain Layout

    anndf = utils.read_annotations(annotations_path, ['Aux'])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    amgng_df = None
\end_layout

\begin_layout Plain Layout

    if do_amgng:
\end_layout

\begin_layout Plain Layout

        from mgng.amgng import main as amgng_main
\end_layout

\begin_layout Plain Layout

        print('Training AMGNG model...')
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_amgng_{}'.format(amgng_file))
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, amgng_file)
\end_layout

\begin_layout Plain Layout

        start = datetime.now()
\end_layout

\begin_layout Plain Layout

        amgng_main(input_file=full_path, output_file=out_file,
\end_layout

\begin_layout Plain Layout

                   buffer_len=buffer_len, index_col='timestamp',
\end_layout

\begin_layout Plain Layout

                   skip_rows=[1,2], ma_window=ma_window,
\end_layout

\begin_layout Plain Layout

                   ma_recalc_delay=ma_recalc_delay)
\end_layout

\begin_layout Plain Layout

        amgng_time = datetime.now() - start
\end_layout

\begin_layout Plain Layout

        amgng_df = set_annotations_and_plot(out_file, anndf,
\end_layout

\begin_layout Plain Layout

                                            'anomaly_density', plot)
\end_layout

\begin_layout Plain Layout

        amgng_df['AnnotationSpans'] = amgng_df.Annotation.copy()
\end_layout

\begin_layout Plain Layout

        utils.fill_annotations(amgng_df, 'Annotation', '.*OA.*',
\end_layout

\begin_layout Plain Layout

                               spans_field='AnnotationSpans', method='pad',
\end_layout

\begin_layout Plain Layout

                               mean=mean_oa, std=mean_sem)
\end_layout

\begin_layout Plain Layout

        amgng_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        print('Time taken: amgng={}'.format(amgng_time))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    cla_df = None
\end_layout

\begin_layout Plain Layout

    if do_cla:
\end_layout

\begin_layout Plain Layout

        from cla.swarm import swarm
\end_layout

\begin_layout Plain Layout

        from cla.cla import create_model, open_input_file
\end_layout

\begin_layout Plain Layout

        from cla.cla import  prepare_run, process_row
\end_layout

\begin_layout Plain Layout

        print('Training CLA model...')
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, cla_file)
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_cla_{}'.format(cla_file))
\end_layout

\begin_layout Plain Layout

        cla_model = {}
\end_layout

\begin_layout Plain Layout

        fields, csv_reader, input_handler = open_input_file(full_path)
\end_layout

\begin_layout Plain Layout

        start = datetime.now()
\end_layout

\begin_layout Plain Layout

        for p in fields:
\end_layout

\begin_layout Plain Layout

            swarm_desc = fill_swarm_description(full_path, buffer_len, p)
\end_layout

\begin_layout Plain Layout

            model_params = swarm(cwd=cwd, input_file=cla_file,
\end_layout

\begin_layout Plain Layout

                                 swarm_description=swarm_desc)
\end_layout

\begin_layout Plain Layout

            model = create_model(params=model_params, predictedField=p)
\end_layout

\begin_layout Plain Layout

            model_out_file = os.path.join(cwd, '{}_{}'.format(p, cla_file))
\end_layout

\begin_layout Plain Layout

            shifter, output_handler = prepare_run(fields=fields,
\end_layout

\begin_layout Plain Layout

                                                  predicted_field=p,
\end_layout

\begin_layout Plain Layout

                                                  plot=False,
\end_layout

\begin_layout Plain Layout

                                                  output_name=model_out_file)
\end_layout

\begin_layout Plain Layout

            cla_model[p] = {'model': model, 'shifter': shifter,
\end_layout

\begin_layout Plain Layout

                            'output_handler': output_handler,
\end_layout

\begin_layout Plain Layout

                            'model_out_file': model_out_file}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        swarm_time = datetime.now() - start
\end_layout

\begin_layout Plain Layout

        start = datetime.now()
\end_layout

\begin_layout Plain Layout

        for i, row in enumerate(csv_reader):
\end_layout

\begin_layout Plain Layout

            for p in fields:
\end_layout

\begin_layout Plain Layout

                process_row(row=row, fields=fields, predicted_field=p,
\end_layout

\begin_layout Plain Layout

                            model=cla_model[p]['model'],
\end_layout

\begin_layout Plain Layout

                            shifter=cla_model[p]['shifter'],
\end_layout

\begin_layout Plain Layout

                            output_handler=cla_model[p]['output_handler'],
\end_layout

\begin_layout Plain Layout

                            counter=i)
\end_layout

\begin_layout Plain Layout

        cla_time = datetime.now() - start
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        input_handler.close()
\end_layout

\begin_layout Plain Layout

        for i, p in enumerate(fields):
\end_layout

\begin_layout Plain Layout

            cla_model[p]['output_handler'].close()
\end_layout

\begin_layout Plain Layout

            df = pd.read_csv(cla_model[p]['model_out_file'], parse_dates=True,
\end_layout

\begin_layout Plain Layout

                             index_col='timestamp')
\end_layout

\begin_layout Plain Layout

            if i == 0:
\end_layout

\begin_layout Plain Layout

                cla_df = df
\end_layout

\begin_layout Plain Layout

            else:
\end_layout

\begin_layout Plain Layout

                cla_df.anomaly_likelihood += df.anomaly_likelihood
\end_layout

\begin_layout Plain Layout

        cla_df.anomaly_likelihood /= len(fields)
\end_layout

\begin_layout Plain Layout

        cla_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        cla_df = set_annotations_and_plot(out_file, anndf,
\end_layout

\begin_layout Plain Layout

                                          'anomaly_likelihood', plot)
\end_layout

\begin_layout Plain Layout

        cla_df['AnnotationSpans'] = cla_df.Annotation.copy()
\end_layout

\begin_layout Plain Layout

        utils.fill_annotations(cla_df, 'Annotation', '.*OA.*',
\end_layout

\begin_layout Plain Layout

                               spans_field='AnnotationSpans', method='pad',
\end_layout

\begin_layout Plain Layout

                               mean=mean_oa, std=mean_sem)
\end_layout

\begin_layout Plain Layout

        cla_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        print('Time taken: swarm={}, cla={}'.format(swarm_time, cla_time))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return amgng_df, cla_df
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    import sys
\end_layout

\begin_layout Plain Layout

    args = sys.argv
\end_layout

\begin_layout Plain Layout

    if '--do_amgng' in args:
\end_layout

\begin_layout Plain Layout

        do_amgng = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_amgng = False
\end_layout

\begin_layout Plain Layout

    if '--amgng_file' in args:
\end_layout

\begin_layout Plain Layout

        amgng_file = args[args.index('--amgng_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        amgng_file = 'experiments/slpdb_slp37_1d/slpdb_slp37_final.csv'
\end_layout

\begin_layout Plain Layout

    if '--do_cla' in args:
\end_layout

\begin_layout Plain Layout

        do_cla = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_cla = False
\end_layout

\begin_layout Plain Layout

    if '--cla_file' in args:
\end_layout

\begin_layout Plain Layout

        cla_file = args[args.index('--cla_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        cla_file = 'experiments/slpdb_slp37_1d/slpdb_slp37_final.csv'
\end_layout

\begin_layout Plain Layout

    if '--cwd' in args:
\end_layout

\begin_layout Plain Layout

        cwd = args[args.index('--cwd') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        if do_amgng:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(amgng_file)
\end_layout

\begin_layout Plain Layout

            amgng_file = os.path.basename(amgng_file)
\end_layout

\begin_layout Plain Layout

        elif do_cla:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(cla_file)
\end_layout

\begin_layout Plain Layout

            cla_file = os.path.basename(cla_file)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            cwd = os.getcwd()
\end_layout

\begin_layout Plain Layout

    if '--buffer_len' in args:
\end_layout

\begin_layout Plain Layout

        buffer_len = int(args[args.index('--buffer_len') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        buffer_len = 300
\end_layout

\begin_layout Plain Layout

    if '--ma_window' in args:
\end_layout

\begin_layout Plain Layout

        ma_window = int(args[args.index('--ma_window') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_window = 300
\end_layout

\begin_layout Plain Layout

    if '--ma_recalc_delay' in args:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = int(args[args.index('--ma_recalc_delay') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = 1
\end_layout

\begin_layout Plain Layout

    if '--plot' in args:
\end_layout

\begin_layout Plain Layout

        plot = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        plot = False
\end_layout

\begin_layout Plain Layout

    main(cwd=cwd, do_amgng=do_amgng, amgng_file=amgng_file,
\end_layout

\begin_layout Plain Layout

         ma_window=ma_window, do_cla=do_cla, cla_file=cla_file,
\end_layout

\begin_layout Plain Layout

         buffer_len=buffer_len, plot=plot, ma_recalc_delay=ma_recalc_delay)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{
\end_layout

\end_inset

caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

run_mimic_212.py
\begin_inset ERT
status open

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "src:run_mimic_212_py"

\end_inset

 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

from __future__ import division, print_function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import inspect
\end_layout

\begin_layout Plain Layout

from datetime import timedelta
\end_layout

\begin_layout Plain Layout

import shutil
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import utils
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def set_annotations_and_plot(file_name, anndf, likelohood_column, plot):
\end_layout

\begin_layout Plain Layout

    print('Reading results...')
\end_layout

\begin_layout Plain Layout

    df = pd.read_csv(file_name, parse_dates=True, index_col='timestamp')
\end_layout

\begin_layout Plain Layout

    df['Annotation'] = anndf.Aux
\end_layout

\begin_layout Plain Layout

    print('Writing annotated results...')
\end_layout

\begin_layout Plain Layout

    df.to_csv(file_name)
\end_layout

\begin_layout Plain Layout

    if plot:
\end_layout

\begin_layout Plain Layout

        utils.plot_results(df, ['MCL1', 'II', 'V',
\end_layout

\begin_layout Plain Layout

                                'ABP', 'PAP',
\end_layout

\begin_layout Plain Layout

                                'PLETH', 'RESP'],
\end_layout

\begin_layout Plain Layout

                           'anomaly_score', likelohood_column, '^ALARM.*')
\end_layout

\begin_layout Plain Layout

    return df
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def fill_swarm_description(file_path, buffer_len, predicted_field):
\end_layout

\begin_layout Plain Layout

    swarm_desc = {
\end_layout

\begin_layout Plain Layout

        'includedFields': [
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'timestamp',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'datetime',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'MCL1',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'II',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'V',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'ABP',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'PAP',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'PLETH',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'RESP',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

        ],
\end_layout

\begin_layout Plain Layout

        'streamDef': {
\end_layout

\begin_layout Plain Layout

            'info': 'mimic 212',
\end_layout

\begin_layout Plain Layout

            'version': 1,
\end_layout

\begin_layout Plain Layout

            'streams': [
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                    'info': 'mimic 212',
\end_layout

\begin_layout Plain Layout

                    'source': file_path,
\end_layout

\begin_layout Plain Layout

                    'columns': ['*']
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            ]
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        'inferenceType': 'TemporalAnomaly',
\end_layout

\begin_layout Plain Layout

        'inferenceArgs': {
\end_layout

\begin_layout Plain Layout

            'predictionSteps': [1],
\end_layout

\begin_layout Plain Layout

            'predictedField': predicted_field
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        'iterationCount': buffer_len,
\end_layout

\begin_layout Plain Layout

        'swarmSize': 'medium'
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return swarm_desc
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main(cwd, do_amgng, amgng_file, ma_window, ma_recalc_delay,
\end_layout

\begin_layout Plain Layout

         do_cla, cla_file, buffer_len, plot):
\end_layout

\begin_layout Plain Layout

    values = inspect.getargvalues(inspect.currentframe())[3]
\end_layout

\begin_layout Plain Layout

    print('using parameters: {}'.format(values))
\end_layout

\begin_layout Plain Layout

    annotations_path = os.path.join(cwd, 'annotations.csv')
\end_layout

\begin_layout Plain Layout

    anndf = utils.read_annotations(annotations_path, ['Aux'])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    amgng_df = None
\end_layout

\begin_layout Plain Layout

    if do_amgng:
\end_layout

\begin_layout Plain Layout

        from mgng.amgng import main as amgng_main
\end_layout

\begin_layout Plain Layout

        print('Training AMGNG model...')
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_amgng_{}'.format(amgng_file))
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, amgng_file)
\end_layout

\begin_layout Plain Layout

        amgng_main(input_file=full_path, output_file=out_file,
\end_layout

\begin_layout Plain Layout

                   buffer_len=buffer_len, index_col='timestamp',
\end_layout

\begin_layout Plain Layout

                   skip_rows=[1,2], ma_window=ma_window,
\end_layout

\begin_layout Plain Layout

                   ma_recalc_delay=ma_recalc_delay)
\end_layout

\begin_layout Plain Layout

        amgng_df = set_annotations_and_plot(out_file, anndf,
\end_layout

\begin_layout Plain Layout

                                            'anomaly_density', plot)
\end_layout

\begin_layout Plain Layout

        amgng_df['AnnotationSpans'] = amgng_df.Annotation.copy()
\end_layout

\begin_layout Plain Layout

        utils.fill_annotations(amgng_df, 'AnnotationSpans',
\end_layout

\begin_layout Plain Layout

                               'ALARM(?!:.*MISSED BEATS)')
\end_layout

\begin_layout Plain Layout

        amgng_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    cla_df = None
\end_layout

\begin_layout Plain Layout

    if do_cla:
\end_layout

\begin_layout Plain Layout

        from cla.swarm import swarm
\end_layout

\begin_layout Plain Layout

        from cla.cla import create_model, open_input_file
\end_layout

\begin_layout Plain Layout

        from cla.cla import  prepare_run, process_row
\end_layout

\begin_layout Plain Layout

        print('Training CLA model...')
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, cla_file)
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_cla_{}'.format(cla_file))
\end_layout

\begin_layout Plain Layout

        cla_model = {}
\end_layout

\begin_layout Plain Layout

        fields, csv_reader, input_handler = open_input_file(full_path)
\end_layout

\begin_layout Plain Layout

        for p in fields:
\end_layout

\begin_layout Plain Layout

            swarm_desc = fill_swarm_description(full_path, buffer_len, p)
\end_layout

\begin_layout Plain Layout

            model_params = swarm(cwd=cwd, input_file=cla_file,
\end_layout

\begin_layout Plain Layout

                                 swarm_description=swarm_desc,
\end_layout

\begin_layout Plain Layout

                                 max_workers=8)
\end_layout

\begin_layout Plain Layout

            model = create_model(params=model_params, predictedField=p)
\end_layout

\begin_layout Plain Layout

            model_out_file = os.path.join(cwd, '{}_{}'.format(p, cla_file))
\end_layout

\begin_layout Plain Layout

            shifter, output_handler = prepare_run(fields=fields,
\end_layout

\begin_layout Plain Layout

                                                  predicted_field=p,
\end_layout

\begin_layout Plain Layout

                                                  plot=False,
\end_layout

\begin_layout Plain Layout

                                                  output_name=model_out_file)
\end_layout

\begin_layout Plain Layout

            cla_model[p] = {'model': model, 'shifter': shifter,
\end_layout

\begin_layout Plain Layout

                            'output_handler': output_handler,
\end_layout

\begin_layout Plain Layout

                            'model_out_file': model_out_file}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        for i, row in enumerate(csv_reader):
\end_layout

\begin_layout Plain Layout

            for p in fields:
\end_layout

\begin_layout Plain Layout

                process_row(row=row, fields=fields, predicted_field=p,
\end_layout

\begin_layout Plain Layout

                            model=cla_model[p]['model'],
\end_layout

\begin_layout Plain Layout

                            shifter=cla_model[p]['shifter'],
\end_layout

\begin_layout Plain Layout

                            output_handler=cla_model[p]['output_handler'],
\end_layout

\begin_layout Plain Layout

                            counter=i)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        input_handler.close()
\end_layout

\begin_layout Plain Layout

        for i, p in enumerate(fields):
\end_layout

\begin_layout Plain Layout

            cla_model[p]['output_handler'].close()
\end_layout

\begin_layout Plain Layout

            df = pd.read_csv(cla_model[p]['model_out_file'], parse_dates=True,
\end_layout

\begin_layout Plain Layout

                             index_col='timestamp')
\end_layout

\begin_layout Plain Layout

            if i == 0:
\end_layout

\begin_layout Plain Layout

                cla_df = df
\end_layout

\begin_layout Plain Layout

            else:
\end_layout

\begin_layout Plain Layout

                cla_df.anomaly_likelihood += df.anomaly_likelihood
\end_layout

\begin_layout Plain Layout

                cla_df.anomaly_score += df.anomaly_score
\end_layout

\begin_layout Plain Layout

        cla_df.anomaly_likelihood /= len(fields)
\end_layout

\begin_layout Plain Layout

        cla_df.anomaly_score /= len(fields)
\end_layout

\begin_layout Plain Layout

        cla_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        cla_df = set_annotations_and_plot(out_file, anndf,
\end_layout

\begin_layout Plain Layout

                                          'anomaly_likelihood', plot)
\end_layout

\begin_layout Plain Layout

        cla_df['AnnotationSpans'] = cla_df.Annotation.copy()
\end_layout

\begin_layout Plain Layout

        utils.fill_annotations(cla_df, 'AnnotationSpans',
\end_layout

\begin_layout Plain Layout

                               'ALARM(?!:.*MISSED BEATS)')
\end_layout

\begin_layout Plain Layout

        cla_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return amgng_df, cla_df
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    import sys
\end_layout

\begin_layout Plain Layout

    args = sys.argv
\end_layout

\begin_layout Plain Layout

    if '--do_amgng' in args:
\end_layout

\begin_layout Plain Layout

        do_amgng = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_amgng = False
\end_layout

\begin_layout Plain Layout

    if '--amgng_file' in args:
\end_layout

\begin_layout Plain Layout

        amgng_file = args[args.index('--amgng_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        amgng_file = 'experiments/mimic_212/mimic_212_final.csv'
\end_layout

\begin_layout Plain Layout

    if '--do_cla' in args:
\end_layout

\begin_layout Plain Layout

        do_cla = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_cla = False
\end_layout

\begin_layout Plain Layout

    if '--cla_file' in args:
\end_layout

\begin_layout Plain Layout

        cla_file = args[args.index('--cla_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        cla_file = 'experiments/mimic_212/mimic_212_final.csv'
\end_layout

\begin_layout Plain Layout

    if '--cwd' in args:
\end_layout

\begin_layout Plain Layout

        cwd = args[args.index('--cwd') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        if do_amgng:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(amgng_file)
\end_layout

\begin_layout Plain Layout

            amgng_file = os.path.basename(amgng_file)
\end_layout

\begin_layout Plain Layout

        elif do_cla:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(cla_file)
\end_layout

\begin_layout Plain Layout

            cla_file = os.path.basename(cla_file)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            cwd = os.getcwd()
\end_layout

\begin_layout Plain Layout

    if '--buffer_len' in args:
\end_layout

\begin_layout Plain Layout

        buffer_len = int(args[args.index('--buffer_len') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        buffer_len = 300
\end_layout

\begin_layout Plain Layout

    if '--ma_window' in args:
\end_layout

\begin_layout Plain Layout

        ma_window = int(args[args.index('--ma_window') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_window = 300
\end_layout

\begin_layout Plain Layout

    if '--ma_recalc_delay' in args:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = int(args[args.index('--ma_recalc_delay') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = 1
\end_layout

\begin_layout Plain Layout

    if '--plot' in args:
\end_layout

\begin_layout Plain Layout

        plot = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        plot = False
\end_layout

\begin_layout Plain Layout

    main(cwd=cwd, do_amgng=do_amgng, amgng_file=amgng_file,
\end_layout

\begin_layout Plain Layout

         ma_window=ma_window, do_cla=do_cla, cla_file=cla_file,
\end_layout

\begin_layout Plain Layout

         buffer_len=buffer_len, plot=plot, ma_recalc_delay=ma_recalc_delay)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{
\end_layout

\end_inset

caption=
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

run_slpdb_slp37_nd.py
\begin_inset ERT
status open

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "src:run_slpdb_slp37_nd_py"

\end_inset

 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from __future__ import division, print_function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import inspect
\end_layout

\begin_layout Plain Layout

from datetime import timedelta
\end_layout

\begin_layout Plain Layout

import shutil
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import utils
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mean_oa = 30.695
\end_layout

\begin_layout Plain Layout

mean_sem = 1.7280555555555557
\end_layout

\begin_layout Plain Layout

fields = ['ECG', 'BP', 'EEG', 'Resp_nasal',
\end_layout

\begin_layout Plain Layout

          'Resp_abdominal', 'EOG', 'EMG']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def set_annotations_and_plot(file_name, anndf, likelohood_column, plot):
\end_layout

\begin_layout Plain Layout

    global fields
\end_layout

\begin_layout Plain Layout

    print('Reading results...')
\end_layout

\begin_layout Plain Layout

    df = pd.read_csv(file_name, parse_dates=True, index_col='timestamp')
\end_layout

\begin_layout Plain Layout

    df['Annotation'] = anndf.Aux
\end_layout

\begin_layout Plain Layout

    print('Writing annotated results...')
\end_layout

\begin_layout Plain Layout

    df.to_csv(file_name)
\end_layout

\begin_layout Plain Layout

    if plot:
\end_layout

\begin_layout Plain Layout

        utils.plot_results(df, fields, 'anomaly_score',
\end_layout

\begin_layout Plain Layout

                           likelohood_column, '^ALARM.*')
\end_layout

\begin_layout Plain Layout

    return df
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def fill_swarm_description(file_path, buffer_len, predicted_field):
\end_layout

\begin_layout Plain Layout

    global fields
\end_layout

\begin_layout Plain Layout

    swarm_desc = {
\end_layout

\begin_layout Plain Layout

        'includedFields': [
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                'fieldName': 'timestamp',
\end_layout

\begin_layout Plain Layout

                'fieldType': 'datetime',
\end_layout

\begin_layout Plain Layout

            },
\end_layout

\begin_layout Plain Layout

        ],
\end_layout

\begin_layout Plain Layout

        'streamDef': {
\end_layout

\begin_layout Plain Layout

            'info': 'mimic 212',
\end_layout

\begin_layout Plain Layout

            'version': 1,
\end_layout

\begin_layout Plain Layout

            'streams': [
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                    'info': 'mimic 212',
\end_layout

\begin_layout Plain Layout

                    'source': file_path,
\end_layout

\begin_layout Plain Layout

                    'columns': ['*']
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            ]
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        'inferenceType': 'TemporalAnomaly',
\end_layout

\begin_layout Plain Layout

        'inferenceArgs': {
\end_layout

\begin_layout Plain Layout

            'predictionSteps': [1],
\end_layout

\begin_layout Plain Layout

            'predictedField': predicted_field
\end_layout

\begin_layout Plain Layout

        },
\end_layout

\begin_layout Plain Layout

        'iterationCount': buffer_len,
\end_layout

\begin_layout Plain Layout

        'swarmSize': 'medium'
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    for field in fields:
\end_layout

\begin_layout Plain Layout

        swarm_desc['includedFields'].append(
\end_layout

\begin_layout Plain Layout

                {
\end_layout

\begin_layout Plain Layout

                    'fieldName': field,
\end_layout

\begin_layout Plain Layout

                    'fieldType': 'float',
\end_layout

\begin_layout Plain Layout

                })
\end_layout

\begin_layout Plain Layout

    return swarm_desc
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main(cwd, do_amgng, amgng_file, ma_window, ma_recalc_delay,
\end_layout

\begin_layout Plain Layout

         do_cla, cla_file, buffer_len, plot):
\end_layout

\begin_layout Plain Layout

    global fields, mean_oa, mean_sem
\end_layout

\begin_layout Plain Layout

    values = inspect.getargvalues(inspect.currentframe())[3]
\end_layout

\begin_layout Plain Layout

    print('using parameters: {}'.format(values))
\end_layout

\begin_layout Plain Layout

    annotations_path = os.path.join(cwd, 'annotations.csv')
\end_layout

\begin_layout Plain Layout

    anndf = utils.read_annotations(annotations_path, ['Aux'])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    amgng_df = None
\end_layout

\begin_layout Plain Layout

    if do_amgng:
\end_layout

\begin_layout Plain Layout

        from mgng.amgng import main as amgng_main
\end_layout

\begin_layout Plain Layout

        print('Training AMGNG model...')
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_amgng_{}'.format(amgng_file))
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, amgng_file)
\end_layout

\begin_layout Plain Layout

        amgng_main(input_file=full_path, output_file=out_file,
\end_layout

\begin_layout Plain Layout

                   buffer_len=buffer_len, index_col='timestamp',
\end_layout

\begin_layout Plain Layout

                   skip_rows=[1,2], ma_window=ma_window,
\end_layout

\begin_layout Plain Layout

                   ma_recalc_delay=ma_recalc_delay)
\end_layout

\begin_layout Plain Layout

        amgng_df = set_annotations_and_plot(out_file, anndf,
\end_layout

\begin_layout Plain Layout

                                            'anomaly_density', plot)
\end_layout

\begin_layout Plain Layout

        amgng_df['AnnotationSpans'] = amgng_df.Annotation.copy()
\end_layout

\begin_layout Plain Layout

        utils.fill_annotations(amgng_df, 'Annotation', '.*OA.*',
\end_layout

\begin_layout Plain Layout

                               spans_field='AnnotationSpans', method='pad',
\end_layout

\begin_layout Plain Layout

                               mean=mean_oa, std=mean_sem)
\end_layout

\begin_layout Plain Layout

        amgng_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    cla_df = None
\end_layout

\begin_layout Plain Layout

    if do_cla:
\end_layout

\begin_layout Plain Layout

        from cla.swarm import swarm
\end_layout

\begin_layout Plain Layout

        from cla.cla import create_model, open_input_file
\end_layout

\begin_layout Plain Layout

        from cla.cla import  prepare_run, process_row
\end_layout

\begin_layout Plain Layout

        print('Training CLA model...')
\end_layout

\begin_layout Plain Layout

        full_path = os.path.join(cwd, cla_file)
\end_layout

\begin_layout Plain Layout

        out_file = os.path.join(cwd, 'out_cla_{}'.format(cla_file))       
                                                                       
                                                                 
\end_layout

\begin_layout Plain Layout

        cla_model = {}
\end_layout

\begin_layout Plain Layout

        _, csv_reader, input_handler = open_input_file(full_path)
\end_layout

\begin_layout Plain Layout

        for p in fields:
\end_layout

\begin_layout Plain Layout

            swarm_desc = fill_swarm_description(full_path, buffer_len, p)
\end_layout

\begin_layout Plain Layout

            model_params = swarm(cwd=cwd, input_file=cla_file,
\end_layout

\begin_layout Plain Layout

                                 swarm_description=swarm_desc)
\end_layout

\begin_layout Plain Layout

            model = create_model(params=model_params, predictedField=p)
\end_layout

\begin_layout Plain Layout

            model_out_file = os.path.join(cwd, '{}_{}'.format(p, cla_file))
\end_layout

\begin_layout Plain Layout

            shifter, output_handler = prepare_run(fields=fields,
\end_layout

\begin_layout Plain Layout

                                                  predicted_field=p,
\end_layout

\begin_layout Plain Layout

                                                  plot=False,
\end_layout

\begin_layout Plain Layout

                                                  output_name=model_out_file)
\end_layout

\begin_layout Plain Layout

            cla_model[p] = {'model': model, 'shifter': shifter,
\end_layout

\begin_layout Plain Layout

                            'output_handler': output_handler,
\end_layout

\begin_layout Plain Layout

                            'model_out_file': model_out_file}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        for i, row in enumerate(csv_reader):
\end_layout

\begin_layout Plain Layout

            for p in fields:
\end_layout

\begin_layout Plain Layout

                process_row(row=row, fields=fields, predicted_field=p,
\end_layout

\begin_layout Plain Layout

                            model=cla_model[p]['model'],
\end_layout

\begin_layout Plain Layout

                            shifter=cla_model[p]['shifter'],
\end_layout

\begin_layout Plain Layout

                            output_handler=cla_model[p]['output_handler'],
\end_layout

\begin_layout Plain Layout

                            counter=i)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        input_handler.close()
\end_layout

\begin_layout Plain Layout

        for i, p in enumerate(fields):
\end_layout

\begin_layout Plain Layout

            cla_model[p]['output_handler'].close()
\end_layout

\begin_layout Plain Layout

            df = pd.read_csv(cla_model[p]['model_out_file'], parse_dates=True,
\end_layout

\begin_layout Plain Layout

                             index_col='timestamp')
\end_layout

\begin_layout Plain Layout

            if i == 0:
\end_layout

\begin_layout Plain Layout

                cla_df = df
\end_layout

\begin_layout Plain Layout

            else:
\end_layout

\begin_layout Plain Layout

                cla_df.anomaly_likelihood += df.anomaly_likelihood
\end_layout

\begin_layout Plain Layout

                cla_df.anomaly_score += df.anomaly_score
\end_layout

\begin_layout Plain Layout

        cla_df.anomaly_likelihood /= len(fields)
\end_layout

\begin_layout Plain Layout

        cla_df.anomaly_score /= len(fields)
\end_layout

\begin_layout Plain Layout

        cla_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

        cla_df = set_annotations_and_plot(out_file, anndf,
\end_layout

\begin_layout Plain Layout

                                          'anomaly_likelihood', plot)
\end_layout

\begin_layout Plain Layout

        cla_df['AnnotationSpans'] = cla_df.Annotation.copy()
\end_layout

\begin_layout Plain Layout

        utils.fill_annotations(cla_df, 'Annotation', '.*OA.*',
\end_layout

\begin_layout Plain Layout

                               spans_field='AnnotationSpans', method='pad',
\end_layout

\begin_layout Plain Layout

                               mean=mean_oa, std=mean_sem)
\end_layout

\begin_layout Plain Layout

        cla_df.to_csv(out_file)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return amgng_df, cla_df
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    import sys
\end_layout

\begin_layout Plain Layout

    args = sys.argv
\end_layout

\begin_layout Plain Layout

    if '--do_amgng' in args:
\end_layout

\begin_layout Plain Layout

        do_amgng = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_amgng = False
\end_layout

\begin_layout Plain Layout

    if '--amgng_file' in args:
\end_layout

\begin_layout Plain Layout

        amgng_file = args[args.index('--amgng_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        amgng_file = 'experiments/slpdb_slp37_nd/slpdb_slp37_final.csv'
\end_layout

\begin_layout Plain Layout

    if '--do_cla' in args:
\end_layout

\begin_layout Plain Layout

        do_cla = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        do_cla = False
\end_layout

\begin_layout Plain Layout

    if '--cla_file' in args:
\end_layout

\begin_layout Plain Layout

        cla_file = args[args.index('--cla_file') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        cla_file = 'experiments/slpdb_slp37_nd/slpdb_slp37_final.csv'
\end_layout

\begin_layout Plain Layout

    if '--cwd' in args:
\end_layout

\begin_layout Plain Layout

        cwd = args[args.index('--cwd') + 1]
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        if do_amgng:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(amgng_file)
\end_layout

\begin_layout Plain Layout

            amgng_file = os.path.basename(amgng_file)
\end_layout

\begin_layout Plain Layout

        elif do_cla:
\end_layout

\begin_layout Plain Layout

            cwd = os.path.dirname(cla_file)
\end_layout

\begin_layout Plain Layout

            cla_file = os.path.basename(cla_file)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            cwd = os.getcwd()
\end_layout

\begin_layout Plain Layout

    if '--buffer_len' in args:
\end_layout

\begin_layout Plain Layout

        buffer_len = int(args[args.index('--buffer_len') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        buffer_len = 300
\end_layout

\begin_layout Plain Layout

    if '--ma_window' in args:
\end_layout

\begin_layout Plain Layout

        ma_window = int(args[args.index('--ma_window') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_window = 300
\end_layout

\begin_layout Plain Layout

    if '--ma_recalc_delay' in args:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = int(args[args.index('--ma_recalc_delay') + 1])
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        ma_recalc_delay = 1
\end_layout

\begin_layout Plain Layout

    if '--plot' in args:
\end_layout

\begin_layout Plain Layout

        plot = True
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        plot = False
\end_layout

\begin_layout Plain Layout

    main(cwd=cwd, do_amgng=do_amgng, amgng_file=amgng_file,
\end_layout

\begin_layout Plain Layout

         ma_window=ma_window, do_cla=do_cla, cla_file=cla_file,
\end_layout

\begin_layout Plain Layout

         buffer_len=buffer_len, plot=plot, ma_recalc_delay=ma_recalc_delay)
\end_layout

\end_inset


\end_layout

\end_body
\end_document
